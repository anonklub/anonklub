{
  "$schema": "https://biomejs.dev/schemas/1.8.3/schema.json",
  // done by dprint
  "formatter": {
    "enabled": false
  },
  // done by dprint
  "organizeImports": { "enabled": false },
  "javascript": {
    "parser": {
      "unsafeParameterDecoratorsEnabled": true
    }
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true
    },
    "ignore": [
      "**/generated/**",
      "**/*.graphql",
      "**/.graphclient/**",
      "contracts/lib/forge-std/**",
      "contracts/lib/openzeppelin-contracts/**",
      "**/package.json",
      "ui/next.config.js",
      "ui/next-env.d.ts",
      "ui/public/**",
      "queries/**"
    ]
  },
  "overrides": [
    {
      "include": [
        "discord-bot/src/lib/decorators/tryCatch.ts",
        "query-api/src/decorators/handle-dune-credits-error.ts",
        "query-api/src/decorators/tryCatchReply.ts"
      ],
      "linter": {
        "rules": {
          "complexity": { "useArrowFunction": "off" }
        }
      }
    },
    {
      // FIXME: why a string literal was used to get the env var here?
      "include": ["query-api/src/repositories/dune-client/index.ts"],
      "linter": {
        "rules": {
          "complexity": {
            "useLiteralKeys": "off"
          }
        }
      }
    },
    {
      "include": [
        "discord-bot/src/lib/decorators/*.ts",
        "discord-bot/src/events/*.ts",
        "pkgs/proof/src/poseidon.ts",
        "pkgs/proof/src/ExcludableMerkleTree.ts",
        "query-api/src/repositories/dune-client/types.ts",
        "query-api/src/repositories/GraphRepository.ts",
        "query-api/src/decorators/handle-dune-credits-error.ts",
        "**/test/**"
      ],
      "linter": {
        "rules": {
          "suspicious": {
            // FIXME
            "noExplicitAny": "off"
          }
        }
      }
    },
    {
      "include": ["**/test/**"],
      "linter": { "rules": { "suspicious": { "noImplicitAnyLet": "off" } } }
    },
    {
      "include": ["ui/src/components/*.tsx"],
      "linter": {
        "rules": {
          "a11y": {
            "useValidAnchor": "warn"
          }
        }
      }
    },
    {
      "include": ["ui/src/app/**/error.tsx", "discord-bot/src/events/*.ts"],
      "linter": {
        "rules": {
          "suspicious": {
            "noShadowRestrictedNames": "off"
          }
        }
      }
    },
    {
      // FIXME
      "include": ["ui/src/hooks/*.ts"],
      "linter": {
        "rules": {
          "correctness": {
            "useExhaustiveDependencies": "warn"
          }
        }
      }
    },
    {
      // FIXME
      "include": ["ui/src/hooks/useProofRequest.ts", "ui/src/hooks/useSetHelp.ts", "ui/src/hooks/useWorker.ts"],
      "linter": {
        "rules": {
          "correctness": {
            "useExhaustiveDependencies": "off"
          }
        }
      }
    },

    {
      "include": ["pkgs/proof/src/MerkleTree.ts", "pkgs/proof/src/helpers.ts"],
      "linter": { "rules": { "style": { "noParameterAssign": "off" } } }
    },
    // FIXME
    {
      "include": ["ui/src/**"],
      "linter": { "rules": { "complexity": { "noUselessCatch": "warn" } } }
    },
    {
      "include": [
        "discord-bot/src/Client/index.ts",
        "query-api/src/*.ts",
        "discord-bot/src/*.ts"
      ],
      "linter": {
        "rules": {
          // FIXME/investigate
          "complexity": { "noForEach": "off" },
          // using import type breaks typeDI Service/Container
          "style": { "useImportType": "off" }
        }
      }
    }
  ],
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "useIgnoreFile": true
  }
}
