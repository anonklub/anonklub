schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  """Ethereum Address"""
  id: Bytes!
  """All Punks owned by Account"""
  punksOwned(skip: Int = 0, first: Int = 100, orderBy: Punk_orderBy, orderDirection: OrderDirection, where: Punk_filter): [Punk!]
  """Purchases by Account"""
  bought(skip: Int = 0, first: Int = 100, orderBy: Sale_orderBy, orderDirection: OrderDirection, where: Sale_filter): [Sale!]!
  """All Punks owned by Account"""
  nftsOwned(skip: Int = 0, first: Int = 100, orderBy: NFT_orderBy, orderDirection: OrderDirection, where: NFT_filter): [NFT!]!
  """Punks assigned to account (if any)"""
  assigned(skip: Int = 0, first: Int = 100, orderBy: Assign_orderBy, orderDirection: OrderDirection, where: Assign_filter): [Assign!]!
  """Punk transfers by Account"""
  sent(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]!
  """Punk transfers to Account"""
  received(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]!
  """Query bids by Account"""
  bids(skip: Int = 0, first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, where: Bid_filter): [Bid!]!
  """Punks offered for sale by Account"""
  asks(skip: Int = 0, first: Int = 100, orderBy: Ask_orderBy, orderDirection: OrderDirection, where: Ask_filter): [Ask!]!
  """Total number of Punks owned by account"""
  numberOfPunksOwned: BigInt!
  """Total number of Punks assigned to account"""
  numberOfPunksAssigned: BigInt!
  """Total number of transfer by Account"""
  numberOfTransfers: BigInt!
  """Total number of sales by Account"""
  numberOfSales: BigInt!
  """Total number of purchases by Account"""
  numberOfPurchases: BigInt!
  """Total amount spent buying Punks by Account"""
  totalSpent: BigInt!
  """Total amount earned by Account from selling Punks"""
  totalEarned: BigInt!
  """Average amount spent buying Punks by Account"""
  averageAmountSpent: BigInt!
  """Account URL"""
  accountUrl: String!
}

input Account_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  punksOwned_: Punk_filter
  bought_: Sale_filter
  nftsOwned_: NFT_filter
  assigned_: Assign_filter
  sent_: Transfer_filter
  received_: Transfer_filter
  bids_: Bid_filter
  asks_: Ask_filter
  numberOfPunksOwned: BigInt
  numberOfPunksOwned_not: BigInt
  numberOfPunksOwned_gt: BigInt
  numberOfPunksOwned_lt: BigInt
  numberOfPunksOwned_gte: BigInt
  numberOfPunksOwned_lte: BigInt
  numberOfPunksOwned_in: [BigInt!]
  numberOfPunksOwned_not_in: [BigInt!]
  numberOfPunksAssigned: BigInt
  numberOfPunksAssigned_not: BigInt
  numberOfPunksAssigned_gt: BigInt
  numberOfPunksAssigned_lt: BigInt
  numberOfPunksAssigned_gte: BigInt
  numberOfPunksAssigned_lte: BigInt
  numberOfPunksAssigned_in: [BigInt!]
  numberOfPunksAssigned_not_in: [BigInt!]
  numberOfTransfers: BigInt
  numberOfTransfers_not: BigInt
  numberOfTransfers_gt: BigInt
  numberOfTransfers_lt: BigInt
  numberOfTransfers_gte: BigInt
  numberOfTransfers_lte: BigInt
  numberOfTransfers_in: [BigInt!]
  numberOfTransfers_not_in: [BigInt!]
  numberOfSales: BigInt
  numberOfSales_not: BigInt
  numberOfSales_gt: BigInt
  numberOfSales_lt: BigInt
  numberOfSales_gte: BigInt
  numberOfSales_lte: BigInt
  numberOfSales_in: [BigInt!]
  numberOfSales_not_in: [BigInt!]
  numberOfPurchases: BigInt
  numberOfPurchases_not: BigInt
  numberOfPurchases_gt: BigInt
  numberOfPurchases_lt: BigInt
  numberOfPurchases_gte: BigInt
  numberOfPurchases_lte: BigInt
  numberOfPurchases_in: [BigInt!]
  numberOfPurchases_not_in: [BigInt!]
  totalSpent: BigInt
  totalSpent_not: BigInt
  totalSpent_gt: BigInt
  totalSpent_lt: BigInt
  totalSpent_gte: BigInt
  totalSpent_lte: BigInt
  totalSpent_in: [BigInt!]
  totalSpent_not_in: [BigInt!]
  totalEarned: BigInt
  totalEarned_not: BigInt
  totalEarned_gt: BigInt
  totalEarned_lt: BigInt
  totalEarned_gte: BigInt
  totalEarned_lte: BigInt
  totalEarned_in: [BigInt!]
  totalEarned_not_in: [BigInt!]
  averageAmountSpent: BigInt
  averageAmountSpent_not: BigInt
  averageAmountSpent_gt: BigInt
  averageAmountSpent_lt: BigInt
  averageAmountSpent_gte: BigInt
  averageAmountSpent_lte: BigInt
  averageAmountSpent_in: [BigInt!]
  averageAmountSpent_not_in: [BigInt!]
  accountUrl: String
  accountUrl_not: String
  accountUrl_gt: String
  accountUrl_lt: String
  accountUrl_gte: String
  accountUrl_lte: String
  accountUrl_in: [String!]
  accountUrl_not_in: [String!]
  accountUrl_contains: String
  accountUrl_contains_nocase: String
  accountUrl_not_contains: String
  accountUrl_not_contains_nocase: String
  accountUrl_starts_with: String
  accountUrl_starts_with_nocase: String
  accountUrl_not_starts_with: String
  accountUrl_not_starts_with_nocase: String
  accountUrl_ends_with: String
  accountUrl_ends_with_nocase: String
  accountUrl_not_ends_with: String
  accountUrl_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Account_orderBy {
  id
  punksOwned
  bought
  nftsOwned
  assigned
  sent
  received
  bids
  asks
  numberOfPunksOwned
  numberOfPunksAssigned
  numberOfTransfers
  numberOfSales
  numberOfPurchases
  totalSpent
  totalEarned
  averageAmountSpent
  accountUrl
}

type Ask implements Offer {
  id: ID!
  """Account that created Ask"""
  from: Account!
  """Open Status of Punk. Asks can be either Open or Closed"""
  open: Boolean!
  """Ask for Punk in ETH"""
  amount: BigInt!
  """Punk being offered for sale"""
  nft: NFT
  """Ask created at"""
  created: Event
  """Ask removed at"""
  removed: Event
  offerType: OfferType!
}

type AskCreated implements Event {
  id: ID!
  """Account that created Ask"""
  from: Account
  to: Account
  ask: Ask
  """Ask in ETH"""
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being offered for sale"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input AskCreated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  ask: String
  ask_not: String
  ask_gt: String
  ask_lt: String
  ask_gte: String
  ask_lte: String
  ask_in: [String!]
  ask_not_in: [String!]
  ask_contains: String
  ask_contains_nocase: String
  ask_not_contains: String
  ask_not_contains_nocase: String
  ask_starts_with: String
  ask_starts_with_nocase: String
  ask_not_starts_with: String
  ask_not_starts_with_nocase: String
  ask_ends_with: String
  ask_ends_with_nocase: String
  ask_not_ends_with: String
  ask_not_ends_with_nocase: String
  ask_: Ask_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AskCreated_orderBy {
  id
  from
  to
  ask
  amount
  contract
  nft
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type AskRemoved implements Event {
  id: ID!
  ask: Ask!
  """Account that removed Ask"""
  from: Account
  to: Account
  """Ask that was removed, in ETH"""
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk whose asked was removed"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input AskRemoved_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ask: String
  ask_not: String
  ask_gt: String
  ask_lt: String
  ask_gte: String
  ask_lte: String
  ask_in: [String!]
  ask_not_in: [String!]
  ask_contains: String
  ask_contains_nocase: String
  ask_not_contains: String
  ask_not_contains_nocase: String
  ask_starts_with: String
  ask_starts_with_nocase: String
  ask_not_starts_with: String
  ask_not_starts_with_nocase: String
  ask_ends_with: String
  ask_ends_with_nocase: String
  ask_not_ends_with: String
  ask_not_ends_with_nocase: String
  ask_: Ask_filter
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AskRemoved_orderBy {
  id
  ask
  from
  to
  amount
  contract
  nft
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

input Ask_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  open: Boolean
  open_not: Boolean
  open_in: [Boolean!]
  open_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  created: String
  created_not: String
  created_gt: String
  created_lt: String
  created_gte: String
  created_lte: String
  created_in: [String!]
  created_not_in: [String!]
  created_contains: String
  created_contains_nocase: String
  created_not_contains: String
  created_not_contains_nocase: String
  created_starts_with: String
  created_starts_with_nocase: String
  created_not_starts_with: String
  created_not_starts_with_nocase: String
  created_ends_with: String
  created_ends_with_nocase: String
  created_not_ends_with: String
  created_not_ends_with_nocase: String
  created_: Event_filter
  removed: String
  removed_not: String
  removed_gt: String
  removed_lt: String
  removed_gte: String
  removed_lte: String
  removed_in: [String!]
  removed_not_in: [String!]
  removed_contains: String
  removed_contains_nocase: String
  removed_not_contains: String
  removed_not_contains_nocase: String
  removed_starts_with: String
  removed_starts_with_nocase: String
  removed_not_starts_with: String
  removed_not_starts_with_nocase: String
  removed_ends_with: String
  removed_ends_with_nocase: String
  removed_not_ends_with: String
  removed_not_ends_with_nocase: String
  removed_: Event_filter
  offerType: OfferType
  offerType_not: OfferType
  offerType_in: [OfferType!]
  offerType_not_in: [OfferType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Ask_orderBy {
  id
  from
  open
  amount
  nft
  created
  removed
  offerType
}

type Assign implements Event {
  id: ID!
  """Contract metadata"""
  contract: Contract
  """Punk that was assigned"""
  nft: NFT
  """Account that claimed Punk"""
  to: Account
  amount: BigInt
  from: Account
  type: EventType!
  logNumber: BigInt!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Assign_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Assign_orderBy {
  id
  contract
  nft
  to
  amount
  from
  type
  logNumber
  blockNumber
  blockHash
  txHash
  timestamp
}

type Bid implements Offer {
  id: ID!
  """Bidder"""
  from: Account!
  """Open status of Punk. Bids can be either Open or Closed"""
  open: Boolean!
  """Bid amount in ETH"""
  amount: BigInt!
  """Punk bidded"""
  nft: NFT
  """Bid created at"""
  created: Event
  """Bid removed at"""
  removed: Event
  offerType: OfferType!
}

type BidCreated implements Event {
  id: ID!
  """Account that created Bid"""
  from: Account
  to: Account
  bid: Bid
  """Bid in ETH"""
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being bidded"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input BidCreated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  bid: String
  bid_not: String
  bid_gt: String
  bid_lt: String
  bid_gte: String
  bid_lte: String
  bid_in: [String!]
  bid_not_in: [String!]
  bid_contains: String
  bid_contains_nocase: String
  bid_not_contains: String
  bid_not_contains_nocase: String
  bid_starts_with: String
  bid_starts_with_nocase: String
  bid_not_starts_with: String
  bid_not_starts_with_nocase: String
  bid_ends_with: String
  bid_ends_with_nocase: String
  bid_not_ends_with: String
  bid_not_ends_with_nocase: String
  bid_: Bid_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum BidCreated_orderBy {
  id
  from
  to
  bid
  amount
  contract
  nft
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type BidRemoved implements Event {
  id: ID!
  """Account that removed Bid"""
  from: Account
  to: Account
  """Bid that was removed, in ETH"""
  amount: BigInt
  bid: Bid!
  """Contract metadata"""
  contract: Contract
  """Punk whose Bid was removed"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input BidRemoved_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  bid: String
  bid_not: String
  bid_gt: String
  bid_lt: String
  bid_gte: String
  bid_lte: String
  bid_in: [String!]
  bid_not_in: [String!]
  bid_contains: String
  bid_contains_nocase: String
  bid_not_contains: String
  bid_not_contains_nocase: String
  bid_starts_with: String
  bid_starts_with_nocase: String
  bid_not_starts_with: String
  bid_not_starts_with_nocase: String
  bid_ends_with: String
  bid_ends_with_nocase: String
  bid_not_ends_with: String
  bid_not_ends_with_nocase: String
  bid_: Bid_filter
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum BidRemoved_orderBy {
  id
  from
  to
  amount
  bid
  contract
  nft
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

input Bid_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  open: Boolean
  open_not: Boolean
  open_in: [Boolean!]
  open_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  created: String
  created_not: String
  created_gt: String
  created_lt: String
  created_gte: String
  created_lte: String
  created_in: [String!]
  created_not_in: [String!]
  created_contains: String
  created_contains_nocase: String
  created_not_contains: String
  created_not_contains_nocase: String
  created_starts_with: String
  created_starts_with_nocase: String
  created_not_starts_with: String
  created_not_starts_with_nocase: String
  created_ends_with: String
  created_ends_with_nocase: String
  created_not_ends_with: String
  created_not_ends_with_nocase: String
  created_: Event_filter
  removed: String
  removed_not: String
  removed_gt: String
  removed_lt: String
  removed_gte: String
  removed_lte: String
  removed_in: [String!]
  removed_not_in: [String!]
  removed_contains: String
  removed_contains_nocase: String
  removed_not_contains: String
  removed_not_contains_nocase: String
  removed_starts_with: String
  removed_starts_with_nocase: String
  removed_not_starts_with: String
  removed_not_starts_with_nocase: String
  removed_ends_with: String
  removed_ends_with_nocase: String
  removed_not_ends_with: String
  removed_not_ends_with_nocase: String
  removed_: Event_filter
  offerType: OfferType
  offerType_not: OfferType
  offerType_in: [OfferType!]
  offerType_not_in: [OfferType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Bid_orderBy {
  id
  from
  open
  amount
  nft
  created
  removed
  offerType
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type CToken {
  """TxHash + logNumber"""
  id: ID!
  """Sender"""
  from: Account!
  """Recepient"""
  to: Account!
  """New owner of Punk"""
  owner: String!
  """Amount of cToken transferred"""
  amount: BigInt
  punkId: String
  """Field for storing referenceIDs of other events in the same transaction"""
  referenceId: String!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input CToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  punkId: String
  punkId_not: String
  punkId_gt: String
  punkId_lt: String
  punkId_gte: String
  punkId_lte: String
  punkId_in: [String!]
  punkId_not_in: [String!]
  punkId_contains: String
  punkId_contains_nocase: String
  punkId_not_contains: String
  punkId_not_contains_nocase: String
  punkId_starts_with: String
  punkId_starts_with_nocase: String
  punkId_not_starts_with: String
  punkId_not_starts_with_nocase: String
  punkId_ends_with: String
  punkId_ends_with_nocase: String
  punkId_not_ends_with: String
  punkId_not_ends_with_nocase: String
  referenceId: String
  referenceId_not: String
  referenceId_gt: String
  referenceId_lt: String
  referenceId_gte: String
  referenceId_lte: String
  referenceId_in: [String!]
  referenceId_not_in: [String!]
  referenceId_contains: String
  referenceId_contains_nocase: String
  referenceId_not_contains: String
  referenceId_not_contains_nocase: String
  referenceId_starts_with: String
  referenceId_starts_with_nocase: String
  referenceId_not_starts_with: String
  referenceId_not_starts_with_nocase: String
  referenceId_ends_with: String
  referenceId_ends_with_nocase: String
  referenceId_not_ends_with: String
  referenceId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum CToken_orderBy {
  id
  from
  to
  owner
  amount
  punkId
  referenceId
  blockNumber
  blockHash
  txHash
  timestamp
}

type Contract {
  """Contract Address"""
  id: ID!
  """Token Symbol"""
  symbol: String
  """Token name"""
  name: String
  """Total supply of tokens"""
  totalSupply: BigInt!
  """Total number of Punk sales"""
  totalSales: BigInt!
  """Total Sales in ETH for Punks"""
  totalAmountTraded: BigInt!
  """The hash of the composite image of all the Punks"""
  imageHash: String
}

input Contract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  totalSales: BigInt
  totalSales_not: BigInt
  totalSales_gt: BigInt
  totalSales_lt: BigInt
  totalSales_gte: BigInt
  totalSales_lte: BigInt
  totalSales_in: [BigInt!]
  totalSales_not_in: [BigInt!]
  totalAmountTraded: BigInt
  totalAmountTraded_not: BigInt
  totalAmountTraded_gt: BigInt
  totalAmountTraded_lt: BigInt
  totalAmountTraded_gte: BigInt
  totalAmountTraded_lte: BigInt
  totalAmountTraded_in: [BigInt!]
  totalAmountTraded_not_in: [BigInt!]
  imageHash: String
  imageHash_not: String
  imageHash_gt: String
  imageHash_lt: String
  imageHash_gte: String
  imageHash_lte: String
  imageHash_in: [String!]
  imageHash_not_in: [String!]
  imageHash_contains: String
  imageHash_contains_nocase: String
  imageHash_not_contains: String
  imageHash_not_contains_nocase: String
  imageHash_starts_with: String
  imageHash_starts_with_nocase: String
  imageHash_not_starts_with: String
  imageHash_not_starts_with_nocase: String
  imageHash_ends_with: String
  imageHash_ends_with_nocase: String
  imageHash_not_ends_with: String
  imageHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Contract_orderBy {
  id
  symbol
  name
  totalSupply
  totalSales
  totalAmountTraded
  imageHash
}

type EpnsNotificationCounter {
  id: ID!
  totalCount: BigInt!
}

input EpnsNotificationCounter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalCount: BigInt
  totalCount_not: BigInt
  totalCount_gt: BigInt
  totalCount_lt: BigInt
  totalCount_gte: BigInt
  totalCount_lte: BigInt
  totalCount_in: [BigInt!]
  totalCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum EpnsNotificationCounter_orderBy {
  id
  totalCount
}

type EpnsPushNotification {
  id: ID!
  notificationNumber: BigInt!
  recipient: String!
  notification: String!
}

input EpnsPushNotification_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  notificationNumber: BigInt
  notificationNumber_not: BigInt
  notificationNumber_gt: BigInt
  notificationNumber_lt: BigInt
  notificationNumber_gte: BigInt
  notificationNumber_lte: BigInt
  notificationNumber_in: [BigInt!]
  notificationNumber_not_in: [BigInt!]
  recipient: String
  recipient_not: String
  recipient_gt: String
  recipient_lt: String
  recipient_gte: String
  recipient_lte: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_contains: String
  recipient_contains_nocase: String
  recipient_not_contains: String
  recipient_not_contains_nocase: String
  recipient_starts_with: String
  recipient_starts_with_nocase: String
  recipient_not_starts_with: String
  recipient_not_starts_with_nocase: String
  recipient_ends_with: String
  recipient_ends_with_nocase: String
  recipient_not_ends_with: String
  recipient_not_ends_with_nocase: String
  notification: String
  notification_not: String
  notification_gt: String
  notification_lt: String
  notification_gte: String
  notification_lte: String
  notification_in: [String!]
  notification_not_in: [String!]
  notification_contains: String
  notification_contains_nocase: String
  notification_not_contains: String
  notification_not_contains_nocase: String
  notification_starts_with: String
  notification_starts_with_nocase: String
  notification_not_starts_with: String
  notification_not_starts_with_nocase: String
  notification_ends_with: String
  notification_ends_with_nocase: String
  notification_not_ends_with: String
  notification_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum EpnsPushNotification_orderBy {
  id
  notificationNumber
  recipient
  notification
}

interface Event {
  id: ID!
  """Contract metadata"""
  contract: Contract
  from: Account
  to: Account
  amount: BigInt
  """Punk"""
  nft: NFT
  type: EventType!
  logNumber: BigInt!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

enum EventType {
  ASSIGN
  TRANSFER
  ASK_CREATED
  ASK_REMOVED
  BID_CREATED
  BID_REMOVED
  SALE
  WRAP
  UNWRAP
}

input Event_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Event_orderBy {
  id
  contract
  from
  to
  amount
  nft
  type
  logNumber
  blockNumber
  blockHash
  txHash
  timestamp
}

type MetaData {
  id: ID!
  tokenId: BigInt!
  """URI of Punk"""
  tokenURI: String!
  """Punk image"""
  image: String
  """Punk Svg image"""
  svg: String
  """Contract URI"""
  contractURI: String!
  """Punk"""
  punk: Punk!
  """Punk Traits"""
  traits(skip: Int = 0, first: Int = 100, orderBy: Trait_orderBy, orderDirection: OrderDirection, where: Trait_filter): [Trait!]!
}

input MetaData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  tokenURI: String
  tokenURI_not: String
  tokenURI_gt: String
  tokenURI_lt: String
  tokenURI_gte: String
  tokenURI_lte: String
  tokenURI_in: [String!]
  tokenURI_not_in: [String!]
  tokenURI_contains: String
  tokenURI_contains_nocase: String
  tokenURI_not_contains: String
  tokenURI_not_contains_nocase: String
  tokenURI_starts_with: String
  tokenURI_starts_with_nocase: String
  tokenURI_not_starts_with: String
  tokenURI_not_starts_with_nocase: String
  tokenURI_ends_with: String
  tokenURI_ends_with_nocase: String
  tokenURI_not_ends_with: String
  tokenURI_not_ends_with_nocase: String
  image: String
  image_not: String
  image_gt: String
  image_lt: String
  image_gte: String
  image_lte: String
  image_in: [String!]
  image_not_in: [String!]
  image_contains: String
  image_contains_nocase: String
  image_not_contains: String
  image_not_contains_nocase: String
  image_starts_with: String
  image_starts_with_nocase: String
  image_not_starts_with: String
  image_not_starts_with_nocase: String
  image_ends_with: String
  image_ends_with_nocase: String
  image_not_ends_with: String
  image_not_ends_with_nocase: String
  svg: String
  svg_not: String
  svg_gt: String
  svg_lt: String
  svg_gte: String
  svg_lte: String
  svg_in: [String!]
  svg_not_in: [String!]
  svg_contains: String
  svg_contains_nocase: String
  svg_not_contains: String
  svg_not_contains_nocase: String
  svg_starts_with: String
  svg_starts_with_nocase: String
  svg_not_starts_with: String
  svg_not_starts_with_nocase: String
  svg_ends_with: String
  svg_ends_with_nocase: String
  svg_not_ends_with: String
  svg_not_ends_with_nocase: String
  contractURI: String
  contractURI_not: String
  contractURI_gt: String
  contractURI_lt: String
  contractURI_gte: String
  contractURI_lte: String
  contractURI_in: [String!]
  contractURI_not_in: [String!]
  contractURI_contains: String
  contractURI_contains_nocase: String
  contractURI_not_contains: String
  contractURI_not_contains_nocase: String
  contractURI_starts_with: String
  contractURI_starts_with_nocase: String
  contractURI_not_starts_with: String
  contractURI_not_starts_with_nocase: String
  contractURI_ends_with: String
  contractURI_ends_with_nocase: String
  contractURI_not_ends_with: String
  contractURI_not_ends_with_nocase: String
  punk: String
  punk_not: String
  punk_gt: String
  punk_lt: String
  punk_gte: String
  punk_lte: String
  punk_in: [String!]
  punk_not_in: [String!]
  punk_contains: String
  punk_contains_nocase: String
  punk_not_contains: String
  punk_not_contains_nocase: String
  punk_starts_with: String
  punk_starts_with_nocase: String
  punk_not_starts_with: String
  punk_not_starts_with_nocase: String
  punk_ends_with: String
  punk_ends_with_nocase: String
  punk_not_ends_with: String
  punk_not_ends_with_nocase: String
  punk_: Punk_filter
  traits: [String!]
  traits_not: [String!]
  traits_contains: [String!]
  traits_contains_nocase: [String!]
  traits_not_contains: [String!]
  traits_not_contains_nocase: [String!]
  traits_: Trait_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum MetaData_orderBy {
  id
  tokenId
  tokenURI
  image
  svg
  contractURI
  punk
  traits
}

interface NFT {
  id: ID!
  """Contract metadata"""
  contract: Contract
  numberOfTransfers: BigInt!
  numberOfSales: BigInt!
  """Punk index"""
  tokenId: BigInt!
  """Punk owner"""
  owner: Account!
  """All events"""
  events(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]!
  """ID of current ask for Punk"""
  currentAsk: Ask
  """ID of current bid for Punk"""
  currentBid: Bid
}

input NFT_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  numberOfTransfers: BigInt
  numberOfTransfers_not: BigInt
  numberOfTransfers_gt: BigInt
  numberOfTransfers_lt: BigInt
  numberOfTransfers_gte: BigInt
  numberOfTransfers_lte: BigInt
  numberOfTransfers_in: [BigInt!]
  numberOfTransfers_not_in: [BigInt!]
  numberOfSales: BigInt
  numberOfSales_not: BigInt
  numberOfSales_gt: BigInt
  numberOfSales_lt: BigInt
  numberOfSales_gte: BigInt
  numberOfSales_lte: BigInt
  numberOfSales_in: [BigInt!]
  numberOfSales_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  events_: Event_filter
  currentAsk: String
  currentAsk_not: String
  currentAsk_gt: String
  currentAsk_lt: String
  currentAsk_gte: String
  currentAsk_lte: String
  currentAsk_in: [String!]
  currentAsk_not_in: [String!]
  currentAsk_contains: String
  currentAsk_contains_nocase: String
  currentAsk_not_contains: String
  currentAsk_not_contains_nocase: String
  currentAsk_starts_with: String
  currentAsk_starts_with_nocase: String
  currentAsk_not_starts_with: String
  currentAsk_not_starts_with_nocase: String
  currentAsk_ends_with: String
  currentAsk_ends_with_nocase: String
  currentAsk_not_ends_with: String
  currentAsk_not_ends_with_nocase: String
  currentAsk_: Ask_filter
  currentBid: String
  currentBid_not: String
  currentBid_gt: String
  currentBid_lt: String
  currentBid_gte: String
  currentBid_lte: String
  currentBid_in: [String!]
  currentBid_not_in: [String!]
  currentBid_contains: String
  currentBid_contains_nocase: String
  currentBid_not_contains: String
  currentBid_not_contains_nocase: String
  currentBid_starts_with: String
  currentBid_starts_with_nocase: String
  currentBid_not_starts_with: String
  currentBid_not_starts_with_nocase: String
  currentBid_ends_with: String
  currentBid_ends_with_nocase: String
  currentBid_not_ends_with: String
  currentBid_not_ends_with_nocase: String
  currentBid_: Bid_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum NFT_orderBy {
  id
  contract
  numberOfTransfers
  numberOfSales
  tokenId
  owner
  events
  currentAsk
  currentBid
}

interface Offer {
  id: ID!
  """Punk owner"""
  from: Account!
  """Open Status of Punk. Asks/Bids can be either Open or Closed"""
  open: Boolean!
  """Bid/Ask for Punk in ETH"""
  amount: BigInt!
  """Punk being offered/bidded"""
  nft: NFT
  """Created at. Could be ASK or BID"""
  created: Event
  """Removed at. Could be ASK or BID"""
  removed: Event
  offerType: OfferType!
}

enum OfferType {
  BID
  ASK
}

input Offer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  open: Boolean
  open_not: Boolean
  open_in: [Boolean!]
  open_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  created: String
  created_not: String
  created_gt: String
  created_lt: String
  created_gte: String
  created_lte: String
  created_in: [String!]
  created_not_in: [String!]
  created_contains: String
  created_contains_nocase: String
  created_not_contains: String
  created_not_contains_nocase: String
  created_starts_with: String
  created_starts_with_nocase: String
  created_not_starts_with: String
  created_not_starts_with_nocase: String
  created_ends_with: String
  created_ends_with_nocase: String
  created_not_ends_with: String
  created_not_ends_with_nocase: String
  created_: Event_filter
  removed: String
  removed_not: String
  removed_gt: String
  removed_lt: String
  removed_gte: String
  removed_lte: String
  removed_in: [String!]
  removed_not_in: [String!]
  removed_contains: String
  removed_contains_nocase: String
  removed_not_contains: String
  removed_not_contains_nocase: String
  removed_starts_with: String
  removed_starts_with_nocase: String
  removed_not_starts_with: String
  removed_not_starts_with_nocase: String
  removed_ends_with: String
  removed_ends_with_nocase: String
  removed_not_ends_with: String
  removed_not_ends_with_nocase: String
  removed_: Event_filter
  offerType: OfferType
  offerType_not: OfferType
  offerType_in: [OfferType!]
  offerType_not_in: [OfferType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Offer_orderBy {
  id
  from
  open
  amount
  nft
  created
  removed
  offerType
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Punk implements NFT {
  """Punk ID"""
  id: ID!
  """Account that received Punk"""
  transferedTo: Account
  """Account that claimed Punk"""
  assignedTo: Account
  """Punk buyers"""
  purchasedBy: Account
  """Punk metadata"""
  metadata: MetaData
  """Contract data"""
  contract: Contract
  """Punk tokenId"""
  tokenId: BigInt!
  """Current owner of Punk"""
  owner: Account!
  """Wrap Status"""
  wrapped: Boolean!
  """All Punk events"""
  events(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]!
  """Current Ask for Punk"""
  currentAsk: Ask
  """Current Bid for Punk"""
  currentBid: Bid
  """Current AskCreated event"""
  currentAskCreated: AskCreated
  """Current BidCreated event"""
  currentBidCreated: BidCreated
  """Number of times Punk has been transferred"""
  numberOfTransfers: BigInt!
  """Number of times Punk was sold"""
  numberOfSales: BigInt!
  """Current AskRemoved event"""
  currentAskRemoved: AskRemoved
  """Current BidRemoved event"""
  currentBidRemoved: BidRemoved
  """
  Total amount spent purchasing Punk across OpenSea & Rarible marketplaces
  """
  totalAmountSpentOnPunk: BigInt!
  """Average price for Punk across OpenSea & Rarible marketplaces"""
  averageSalePrice: BigInt!
}

input Punk_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferedTo: String
  transferedTo_not: String
  transferedTo_gt: String
  transferedTo_lt: String
  transferedTo_gte: String
  transferedTo_lte: String
  transferedTo_in: [String!]
  transferedTo_not_in: [String!]
  transferedTo_contains: String
  transferedTo_contains_nocase: String
  transferedTo_not_contains: String
  transferedTo_not_contains_nocase: String
  transferedTo_starts_with: String
  transferedTo_starts_with_nocase: String
  transferedTo_not_starts_with: String
  transferedTo_not_starts_with_nocase: String
  transferedTo_ends_with: String
  transferedTo_ends_with_nocase: String
  transferedTo_not_ends_with: String
  transferedTo_not_ends_with_nocase: String
  transferedTo_: Account_filter
  assignedTo: String
  assignedTo_not: String
  assignedTo_gt: String
  assignedTo_lt: String
  assignedTo_gte: String
  assignedTo_lte: String
  assignedTo_in: [String!]
  assignedTo_not_in: [String!]
  assignedTo_contains: String
  assignedTo_contains_nocase: String
  assignedTo_not_contains: String
  assignedTo_not_contains_nocase: String
  assignedTo_starts_with: String
  assignedTo_starts_with_nocase: String
  assignedTo_not_starts_with: String
  assignedTo_not_starts_with_nocase: String
  assignedTo_ends_with: String
  assignedTo_ends_with_nocase: String
  assignedTo_not_ends_with: String
  assignedTo_not_ends_with_nocase: String
  assignedTo_: Account_filter
  purchasedBy: String
  purchasedBy_not: String
  purchasedBy_gt: String
  purchasedBy_lt: String
  purchasedBy_gte: String
  purchasedBy_lte: String
  purchasedBy_in: [String!]
  purchasedBy_not_in: [String!]
  purchasedBy_contains: String
  purchasedBy_contains_nocase: String
  purchasedBy_not_contains: String
  purchasedBy_not_contains_nocase: String
  purchasedBy_starts_with: String
  purchasedBy_starts_with_nocase: String
  purchasedBy_not_starts_with: String
  purchasedBy_not_starts_with_nocase: String
  purchasedBy_ends_with: String
  purchasedBy_ends_with_nocase: String
  purchasedBy_not_ends_with: String
  purchasedBy_not_ends_with_nocase: String
  purchasedBy_: Account_filter
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_: MetaData_filter
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  wrapped: Boolean
  wrapped_not: Boolean
  wrapped_in: [Boolean!]
  wrapped_not_in: [Boolean!]
  events_: Event_filter
  currentAsk: String
  currentAsk_not: String
  currentAsk_gt: String
  currentAsk_lt: String
  currentAsk_gte: String
  currentAsk_lte: String
  currentAsk_in: [String!]
  currentAsk_not_in: [String!]
  currentAsk_contains: String
  currentAsk_contains_nocase: String
  currentAsk_not_contains: String
  currentAsk_not_contains_nocase: String
  currentAsk_starts_with: String
  currentAsk_starts_with_nocase: String
  currentAsk_not_starts_with: String
  currentAsk_not_starts_with_nocase: String
  currentAsk_ends_with: String
  currentAsk_ends_with_nocase: String
  currentAsk_not_ends_with: String
  currentAsk_not_ends_with_nocase: String
  currentAsk_: Ask_filter
  currentBid: String
  currentBid_not: String
  currentBid_gt: String
  currentBid_lt: String
  currentBid_gte: String
  currentBid_lte: String
  currentBid_in: [String!]
  currentBid_not_in: [String!]
  currentBid_contains: String
  currentBid_contains_nocase: String
  currentBid_not_contains: String
  currentBid_not_contains_nocase: String
  currentBid_starts_with: String
  currentBid_starts_with_nocase: String
  currentBid_not_starts_with: String
  currentBid_not_starts_with_nocase: String
  currentBid_ends_with: String
  currentBid_ends_with_nocase: String
  currentBid_not_ends_with: String
  currentBid_not_ends_with_nocase: String
  currentBid_: Bid_filter
  currentAskCreated: String
  currentAskCreated_not: String
  currentAskCreated_gt: String
  currentAskCreated_lt: String
  currentAskCreated_gte: String
  currentAskCreated_lte: String
  currentAskCreated_in: [String!]
  currentAskCreated_not_in: [String!]
  currentAskCreated_contains: String
  currentAskCreated_contains_nocase: String
  currentAskCreated_not_contains: String
  currentAskCreated_not_contains_nocase: String
  currentAskCreated_starts_with: String
  currentAskCreated_starts_with_nocase: String
  currentAskCreated_not_starts_with: String
  currentAskCreated_not_starts_with_nocase: String
  currentAskCreated_ends_with: String
  currentAskCreated_ends_with_nocase: String
  currentAskCreated_not_ends_with: String
  currentAskCreated_not_ends_with_nocase: String
  currentAskCreated_: AskCreated_filter
  currentBidCreated: String
  currentBidCreated_not: String
  currentBidCreated_gt: String
  currentBidCreated_lt: String
  currentBidCreated_gte: String
  currentBidCreated_lte: String
  currentBidCreated_in: [String!]
  currentBidCreated_not_in: [String!]
  currentBidCreated_contains: String
  currentBidCreated_contains_nocase: String
  currentBidCreated_not_contains: String
  currentBidCreated_not_contains_nocase: String
  currentBidCreated_starts_with: String
  currentBidCreated_starts_with_nocase: String
  currentBidCreated_not_starts_with: String
  currentBidCreated_not_starts_with_nocase: String
  currentBidCreated_ends_with: String
  currentBidCreated_ends_with_nocase: String
  currentBidCreated_not_ends_with: String
  currentBidCreated_not_ends_with_nocase: String
  currentBidCreated_: BidCreated_filter
  numberOfTransfers: BigInt
  numberOfTransfers_not: BigInt
  numberOfTransfers_gt: BigInt
  numberOfTransfers_lt: BigInt
  numberOfTransfers_gte: BigInt
  numberOfTransfers_lte: BigInt
  numberOfTransfers_in: [BigInt!]
  numberOfTransfers_not_in: [BigInt!]
  numberOfSales: BigInt
  numberOfSales_not: BigInt
  numberOfSales_gt: BigInt
  numberOfSales_lt: BigInt
  numberOfSales_gte: BigInt
  numberOfSales_lte: BigInt
  numberOfSales_in: [BigInt!]
  numberOfSales_not_in: [BigInt!]
  currentAskRemoved: String
  currentAskRemoved_not: String
  currentAskRemoved_gt: String
  currentAskRemoved_lt: String
  currentAskRemoved_gte: String
  currentAskRemoved_lte: String
  currentAskRemoved_in: [String!]
  currentAskRemoved_not_in: [String!]
  currentAskRemoved_contains: String
  currentAskRemoved_contains_nocase: String
  currentAskRemoved_not_contains: String
  currentAskRemoved_not_contains_nocase: String
  currentAskRemoved_starts_with: String
  currentAskRemoved_starts_with_nocase: String
  currentAskRemoved_not_starts_with: String
  currentAskRemoved_not_starts_with_nocase: String
  currentAskRemoved_ends_with: String
  currentAskRemoved_ends_with_nocase: String
  currentAskRemoved_not_ends_with: String
  currentAskRemoved_not_ends_with_nocase: String
  currentAskRemoved_: AskRemoved_filter
  currentBidRemoved: String
  currentBidRemoved_not: String
  currentBidRemoved_gt: String
  currentBidRemoved_lt: String
  currentBidRemoved_gte: String
  currentBidRemoved_lte: String
  currentBidRemoved_in: [String!]
  currentBidRemoved_not_in: [String!]
  currentBidRemoved_contains: String
  currentBidRemoved_contains_nocase: String
  currentBidRemoved_not_contains: String
  currentBidRemoved_not_contains_nocase: String
  currentBidRemoved_starts_with: String
  currentBidRemoved_starts_with_nocase: String
  currentBidRemoved_not_starts_with: String
  currentBidRemoved_not_starts_with_nocase: String
  currentBidRemoved_ends_with: String
  currentBidRemoved_ends_with_nocase: String
  currentBidRemoved_not_ends_with: String
  currentBidRemoved_not_ends_with_nocase: String
  currentBidRemoved_: BidRemoved_filter
  totalAmountSpentOnPunk: BigInt
  totalAmountSpentOnPunk_not: BigInt
  totalAmountSpentOnPunk_gt: BigInt
  totalAmountSpentOnPunk_lt: BigInt
  totalAmountSpentOnPunk_gte: BigInt
  totalAmountSpentOnPunk_lte: BigInt
  totalAmountSpentOnPunk_in: [BigInt!]
  totalAmountSpentOnPunk_not_in: [BigInt!]
  averageSalePrice: BigInt
  averageSalePrice_not: BigInt
  averageSalePrice_gt: BigInt
  averageSalePrice_lt: BigInt
  averageSalePrice_gte: BigInt
  averageSalePrice_lte: BigInt
  averageSalePrice_in: [BigInt!]
  averageSalePrice_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Punk_orderBy {
  id
  transferedTo
  assignedTo
  purchasedBy
  metadata
  contract
  tokenId
  owner
  wrapped
  events
  currentAsk
  currentBid
  currentAskCreated
  currentBidCreated
  numberOfTransfers
  numberOfSales
  currentAskRemoved
  currentBidRemoved
  totalAmountSpentOnPunk
  averageSalePrice
}

type Query {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  punk(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Punk
  punks(
    skip: Int = 0
    first: Int = 100
    orderBy: Punk_orderBy
    orderDirection: OrderDirection
    where: Punk_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Punk!]!
  metaData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetaData
  metaDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaData_orderBy
    orderDirection: OrderDirection
    where: MetaData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetaData!]!
  trait(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trait
  traits(
    skip: Int = 0
    first: Int = 100
    orderBy: Trait_orderBy
    orderDirection: OrderDirection
    where: Trait_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trait!]!
  ask(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Ask
  asks(
    skip: Int = 0
    first: Int = 100
    orderBy: Ask_orderBy
    orderDirection: OrderDirection
    where: Ask_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Ask!]!
  bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: Contract_orderBy
    orderDirection: OrderDirection
    where: Contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Contract!]!
  assign(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Assign
  assigns(
    skip: Int = 0
    first: Int = 100
    orderBy: Assign_orderBy
    orderDirection: OrderDirection
    where: Assign_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Assign!]!
  sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sale
  sales(
    skip: Int = 0
    first: Int = 100
    orderBy: Sale_orderBy
    orderDirection: OrderDirection
    where: Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sale!]!
  askCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AskCreated
  askCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: AskCreated_orderBy
    orderDirection: OrderDirection
    where: AskCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AskCreated!]!
  bidCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidCreated
  bidCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: BidCreated_orderBy
    orderDirection: OrderDirection
    where: BidCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BidCreated!]!
  bidRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidRemoved
  bidRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: BidRemoved_orderBy
    orderDirection: OrderDirection
    where: BidRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BidRemoved!]!
  askRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AskRemoved
  askRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: AskRemoved_orderBy
    orderDirection: OrderDirection
    where: AskRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AskRemoved!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  ctoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CToken
  ctokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CToken_orderBy
    orderDirection: OrderDirection
    where: CToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CToken!]!
  wrap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Wrap
  wraps(
    skip: Int = 0
    first: Int = 100
    orderBy: Wrap_orderBy
    orderDirection: OrderDirection
    where: Wrap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Wrap!]!
  unwrap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unwrap
  unwraps(
    skip: Int = 0
    first: Int = 100
    orderBy: Unwrap_orderBy
    orderDirection: OrderDirection
    where: Unwrap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unwrap!]!
  userProxy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserProxy
  userProxies(
    skip: Int = 0
    first: Int = 100
    orderBy: UserProxy_orderBy
    orderDirection: OrderDirection
    where: UserProxy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserProxy!]!
  epnsNotificationCounter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EpnsNotificationCounter
  epnsNotificationCounters(
    skip: Int = 0
    first: Int = 100
    orderBy: EpnsNotificationCounter_orderBy
    orderDirection: OrderDirection
    where: EpnsNotificationCounter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EpnsNotificationCounter!]!
  epnsPushNotification(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EpnsPushNotification
  epnsPushNotifications(
    skip: Int = 0
    first: Int = 100
    orderBy: EpnsPushNotification_orderBy
    orderDirection: OrderDirection
    where: EpnsPushNotification_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EpnsPushNotification!]!
  nft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFT
  nfts(
    skip: Int = 0
    first: Int = 100
    orderBy: NFT_orderBy
    orderDirection: OrderDirection
    where: NFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFT!]!
  event(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Sale implements Event {
  id: ID!
  """Punk buyer"""
  to: Account
  """Amount in ETH"""
  amount: BigInt
  """Punk seller"""
  from: Account
  """Contract metadata"""
  contract: Contract
  """Punk being sold"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Sale_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Sale_orderBy {
  id
  to
  amount
  from
  contract
  nft
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type Subscription {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  punk(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Punk
  punks(
    skip: Int = 0
    first: Int = 100
    orderBy: Punk_orderBy
    orderDirection: OrderDirection
    where: Punk_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Punk!]!
  metaData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetaData
  metaDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaData_orderBy
    orderDirection: OrderDirection
    where: MetaData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetaData!]!
  trait(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trait
  traits(
    skip: Int = 0
    first: Int = 100
    orderBy: Trait_orderBy
    orderDirection: OrderDirection
    where: Trait_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trait!]!
  ask(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Ask
  asks(
    skip: Int = 0
    first: Int = 100
    orderBy: Ask_orderBy
    orderDirection: OrderDirection
    where: Ask_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Ask!]!
  bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: Contract_orderBy
    orderDirection: OrderDirection
    where: Contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Contract!]!
  assign(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Assign
  assigns(
    skip: Int = 0
    first: Int = 100
    orderBy: Assign_orderBy
    orderDirection: OrderDirection
    where: Assign_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Assign!]!
  sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sale
  sales(
    skip: Int = 0
    first: Int = 100
    orderBy: Sale_orderBy
    orderDirection: OrderDirection
    where: Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sale!]!
  askCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AskCreated
  askCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: AskCreated_orderBy
    orderDirection: OrderDirection
    where: AskCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AskCreated!]!
  bidCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidCreated
  bidCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: BidCreated_orderBy
    orderDirection: OrderDirection
    where: BidCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BidCreated!]!
  bidRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidRemoved
  bidRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: BidRemoved_orderBy
    orderDirection: OrderDirection
    where: BidRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BidRemoved!]!
  askRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AskRemoved
  askRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: AskRemoved_orderBy
    orderDirection: OrderDirection
    where: AskRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AskRemoved!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  ctoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CToken
  ctokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CToken_orderBy
    orderDirection: OrderDirection
    where: CToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CToken!]!
  wrap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Wrap
  wraps(
    skip: Int = 0
    first: Int = 100
    orderBy: Wrap_orderBy
    orderDirection: OrderDirection
    where: Wrap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Wrap!]!
  unwrap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unwrap
  unwraps(
    skip: Int = 0
    first: Int = 100
    orderBy: Unwrap_orderBy
    orderDirection: OrderDirection
    where: Unwrap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unwrap!]!
  userProxy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserProxy
  userProxies(
    skip: Int = 0
    first: Int = 100
    orderBy: UserProxy_orderBy
    orderDirection: OrderDirection
    where: UserProxy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserProxy!]!
  epnsNotificationCounter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EpnsNotificationCounter
  epnsNotificationCounters(
    skip: Int = 0
    first: Int = 100
    orderBy: EpnsNotificationCounter_orderBy
    orderDirection: OrderDirection
    where: EpnsNotificationCounter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EpnsNotificationCounter!]!
  epnsPushNotification(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EpnsPushNotification
  epnsPushNotifications(
    skip: Int = 0
    first: Int = 100
    orderBy: EpnsPushNotification_orderBy
    orderDirection: OrderDirection
    where: EpnsPushNotification_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EpnsPushNotification!]!
  nft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFT
  nfts(
    skip: Int = 0
    first: Int = 100
    orderBy: NFT_orderBy
    orderDirection: OrderDirection
    where: NFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFT!]!
  event(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Trait {
  """Trait"""
  id: ID!
  type: TraitType!
  metaDatas(skip: Int = 0, first: Int = 100, orderBy: MetaData_orderBy, orderDirection: OrderDirection, where: MetaData_filter): [MetaData!]!
  """Number of Punks with this trait"""
  numberOfNfts: BigInt!
}

enum TraitType {
  TYPE
  ACCESSORY
}

input Trait_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: TraitType
  type_not: TraitType
  type_in: [TraitType!]
  type_not_in: [TraitType!]
  metaDatas_: MetaData_filter
  numberOfNfts: BigInt
  numberOfNfts_not: BigInt
  numberOfNfts_gt: BigInt
  numberOfNfts_lt: BigInt
  numberOfNfts_gte: BigInt
  numberOfNfts_lte: BigInt
  numberOfNfts_in: [BigInt!]
  numberOfNfts_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Trait_orderBy {
  id
  type
  metaDatas
  numberOfNfts
}

type Transfer implements Event {
  id: ID!
  """Sender"""
  from: Account
  """Receiver"""
  to: Account
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being transferred"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Transfer_orderBy {
  id
  from
  to
  amount
  contract
  nft
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type Unwrap implements Event {
  id: ID!
  """Account that unwrapped Punk"""
  from: Account
  to: Account
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being unwrapped"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Unwrap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Unwrap_orderBy {
  id
  from
  to
  amount
  contract
  nft
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type UserProxy {
  """Contract Address of UserProxy"""
  id: ID!
  """Account that owns the Proxy"""
  user: Account!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input UserProxy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: Account_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum UserProxy_orderBy {
  id
  user
  blockNumber
  blockHash
  txHash
  timestamp
}

type Wrap implements Event {
  id: ID!
  """Account that wrapped Punk"""
  from: Account
  to: Account
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being wrapped"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Wrap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Wrap_orderBy {
  id
  from
  to
  amount
  contract
  nft
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}