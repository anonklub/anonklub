schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Delegate {
  """
  A Delegate is any address that has been delegated with voting tokens by a token holder, id is the blockchain address of said delegate
  """
  id: String!
  """
  Amount of votes delegated to this delegate to be used on proposal votings expressed in the smallest unit of the token
  """
  delegatedVotesRaw: BigInt!
  """
  Amount of votes delegated to this delegate to be used on proposal votings expressed as a BigDecimal normalized value
  """
  delegatedVotes: BigDecimal!
  """Total token holders that this delegate represents"""
  tokenHoldersRepresentedAmount: Int!
  """Token holders that this delegate represents"""
  tokenHoldersRepresented(skip: Int = 0, first: Int = 100, orderBy: TokenHolder_orderBy, orderDirection: OrderDirection, where: TokenHolder_filter): [TokenHolder!]!
  """Votes that a delegate has made in different proposals"""
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]!
  """Number of proposals voted on"""
  numberVotes: Int!
  """Proposals that the delegate has created"""
  proposals(skip: Int = 0, first: Int = 100, orderBy: Proposal_orderBy, orderDirection: OrderDirection, where: Proposal_filter): [Proposal!]!
}

type DelegateChange {
  """Unique entity used to keep track of delegate changes"""
  id: ID!
  """Token addresss"""
  tokenAddress: String
  """Token address for delegator"""
  delegator: String!
  """Token address for delegate"""
  delegate: String!
  """Token address for previous delegate"""
  previousDelegate: String!
  """Block time change happened"""
  blockTimestamp: BigInt!
  """Transaction hash of the delegate change event"""
  txnHash: String!
  """Log index for delegate change"""
  logIndex: BigInt!
  """Block number of event"""
  blockNumber: BigInt!
}

input DelegateChange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegate: String
  delegate_not: String
  delegate_gt: String
  delegate_lt: String
  delegate_gte: String
  delegate_lte: String
  delegate_in: [String!]
  delegate_not_in: [String!]
  delegate_contains: String
  delegate_contains_nocase: String
  delegate_not_contains: String
  delegate_not_contains_nocase: String
  delegate_starts_with: String
  delegate_starts_with_nocase: String
  delegate_not_starts_with: String
  delegate_not_starts_with_nocase: String
  delegate_ends_with: String
  delegate_ends_with_nocase: String
  delegate_not_ends_with: String
  delegate_not_ends_with_nocase: String
  previousDelegate: String
  previousDelegate_not: String
  previousDelegate_gt: String
  previousDelegate_lt: String
  previousDelegate_gte: String
  previousDelegate_lte: String
  previousDelegate_in: [String!]
  previousDelegate_not_in: [String!]
  previousDelegate_contains: String
  previousDelegate_contains_nocase: String
  previousDelegate_not_contains: String
  previousDelegate_not_contains_nocase: String
  previousDelegate_starts_with: String
  previousDelegate_starts_with_nocase: String
  previousDelegate_not_starts_with: String
  previousDelegate_not_starts_with_nocase: String
  previousDelegate_ends_with: String
  previousDelegate_ends_with_nocase: String
  previousDelegate_not_ends_with: String
  previousDelegate_not_ends_with_nocase: String
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  txnHash: String
  txnHash_not: String
  txnHash_gt: String
  txnHash_lt: String
  txnHash_gte: String
  txnHash_lte: String
  txnHash_in: [String!]
  txnHash_not_in: [String!]
  txnHash_contains: String
  txnHash_contains_nocase: String
  txnHash_not_contains: String
  txnHash_not_contains_nocase: String
  txnHash_starts_with: String
  txnHash_starts_with_nocase: String
  txnHash_not_starts_with: String
  txnHash_not_starts_with_nocase: String
  txnHash_ends_with: String
  txnHash_ends_with_nocase: String
  txnHash_not_ends_with: String
  txnHash_not_ends_with_nocase: String
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum DelegateChange_orderBy {
  id
  tokenAddress
  delegator
  delegate
  previousDelegate
  blockTimestamp
  txnHash
  logIndex
  blockNumber
}

type DelegateVotingPowerChange {
  """Unique entity used to keep track of voting power delta"""
  id: ID!
  """Token addresss"""
  tokenAddress: String
  """Token address for delegate"""
  delegate: String!
  """Previous voting power of delegate"""
  previousBalance: BigInt!
  """New voting power of delegate"""
  newBalance: BigInt!
  """Block time change happened"""
  blockTimestamp: BigInt!
  """Transaction hash of the voting power change"""
  txnHash: String!
  """Log index for delegate voting power change"""
  logIndex: BigInt!
  """Block number of event"""
  blockNumber: BigInt!
}

input DelegateVotingPowerChange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  delegate: String
  delegate_not: String
  delegate_gt: String
  delegate_lt: String
  delegate_gte: String
  delegate_lte: String
  delegate_in: [String!]
  delegate_not_in: [String!]
  delegate_contains: String
  delegate_contains_nocase: String
  delegate_not_contains: String
  delegate_not_contains_nocase: String
  delegate_starts_with: String
  delegate_starts_with_nocase: String
  delegate_not_starts_with: String
  delegate_not_starts_with_nocase: String
  delegate_ends_with: String
  delegate_ends_with_nocase: String
  delegate_not_ends_with: String
  delegate_not_ends_with_nocase: String
  previousBalance: BigInt
  previousBalance_not: BigInt
  previousBalance_gt: BigInt
  previousBalance_lt: BigInt
  previousBalance_gte: BigInt
  previousBalance_lte: BigInt
  previousBalance_in: [BigInt!]
  previousBalance_not_in: [BigInt!]
  newBalance: BigInt
  newBalance_not: BigInt
  newBalance_gt: BigInt
  newBalance_lt: BigInt
  newBalance_gte: BigInt
  newBalance_lte: BigInt
  newBalance_in: [BigInt!]
  newBalance_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  txnHash: String
  txnHash_not: String
  txnHash_gt: String
  txnHash_lt: String
  txnHash_gte: String
  txnHash_lte: String
  txnHash_in: [String!]
  txnHash_not_in: [String!]
  txnHash_contains: String
  txnHash_contains_nocase: String
  txnHash_not_contains: String
  txnHash_not_contains_nocase: String
  txnHash_starts_with: String
  txnHash_starts_with_nocase: String
  txnHash_not_starts_with: String
  txnHash_not_starts_with_nocase: String
  txnHash_ends_with: String
  txnHash_ends_with_nocase: String
  txnHash_not_ends_with: String
  txnHash_not_ends_with_nocase: String
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum DelegateVotingPowerChange_orderBy {
  id
  tokenAddress
  delegate
  previousBalance
  newBalance
  blockTimestamp
  txnHash
  logIndex
  blockNumber
}

input Delegate_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  delegatedVotesRaw: BigInt
  delegatedVotesRaw_not: BigInt
  delegatedVotesRaw_gt: BigInt
  delegatedVotesRaw_lt: BigInt
  delegatedVotesRaw_gte: BigInt
  delegatedVotesRaw_lte: BigInt
  delegatedVotesRaw_in: [BigInt!]
  delegatedVotesRaw_not_in: [BigInt!]
  delegatedVotes: BigDecimal
  delegatedVotes_not: BigDecimal
  delegatedVotes_gt: BigDecimal
  delegatedVotes_lt: BigDecimal
  delegatedVotes_gte: BigDecimal
  delegatedVotes_lte: BigDecimal
  delegatedVotes_in: [BigDecimal!]
  delegatedVotes_not_in: [BigDecimal!]
  tokenHoldersRepresentedAmount: Int
  tokenHoldersRepresentedAmount_not: Int
  tokenHoldersRepresentedAmount_gt: Int
  tokenHoldersRepresentedAmount_lt: Int
  tokenHoldersRepresentedAmount_gte: Int
  tokenHoldersRepresentedAmount_lte: Int
  tokenHoldersRepresentedAmount_in: [Int!]
  tokenHoldersRepresentedAmount_not_in: [Int!]
  tokenHoldersRepresented_: TokenHolder_filter
  votes_: Vote_filter
  numberVotes: Int
  numberVotes_not: Int
  numberVotes_gt: Int
  numberVotes_lt: Int
  numberVotes_gte: Int
  numberVotes_lte: Int
  numberVotes_in: [Int!]
  numberVotes_not_in: [Int!]
  proposals_: Proposal_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Delegate_orderBy {
  id
  delegatedVotesRaw
  delegatedVotes
  tokenHoldersRepresentedAmount
  tokenHoldersRepresented
  votes
  numberVotes
  proposals
}

type Governance {
  """Unique entity used to keep track of common aggregated data"""
  id: ID!
  """Total Supply of token"""
  totalTokenSupply: BigInt!
  """Total number of token holders currently"""
  currentTokenHolders: BigInt!
  """Total number of token holders"""
  totalTokenHolders: BigInt!
  """Total number of delegates participating on the governance currently"""
  currentDelegates: BigInt!
  """Total number of delegates that held delegated votes"""
  totalDelegates: BigInt!
  """
  Total number of votes delegated expressed in the smallest unit of the token
  """
  delegatedVotesRaw: BigInt!
  """
  Total number of votes delegated expressed as a BigDecimal normalized value for the token
  """
  delegatedVotes: BigDecimal!
  """Total number of proposals created"""
  proposals: BigInt!
  """Number of proposals currently queued for execution"""
  proposalsQueued: BigInt!
  """Number of proposals currently executed"""
  proposalsExecuted: BigInt!
  """Number of proposals currently canceled"""
  proposalsCanceled: BigInt!
}

type GovernanceFramework {
  """Governance framework contract address"""
  id: String!
  """Name of the governance framework"""
  name: String!
  """Type of governance framework"""
  type: GovernanceFrameworkType!
  """Version of the governance framework"""
  version: String!
  """Governance framework contract address"""
  contractAddress: String!
  """
  The contract address associated with the governance token used for voting on the governance framework proposals
  """
  tokenAddress: String!
  """
  The contract address associated with the contract that manages the delay of administrative actions for the governance framework
  """
  timelockAddress: String!
  """The delay before voting on a proposal may take place in blocks"""
  votingDelay: BigInt!
  """The duration of voting on a proposal in blocks"""
  votingPeriod: BigInt!
  """The number of votes required in order for a voter to become a proposer"""
  proposalThreshold: BigInt!
  """The number of votes for a proposal to succeed."""
  quorumVotes: BigInt
  """
  Quorum fraction numerator value. (OZ: quorum = totalSupply * numerator / denominator)
  """
  quorumNumerator: BigInt
  """
  Quorum fraction denominator value. (OZ: quorum = totalSupply * numerator / denominator)
  """
  quorumDenominator: BigInt
}

enum GovernanceFrameworkType {
  GovernorAlpha
  GovernorBravo
  OZGovernor
}

input GovernanceFramework_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  type: GovernanceFrameworkType
  type_not: GovernanceFrameworkType
  type_in: [GovernanceFrameworkType!]
  type_not_in: [GovernanceFrameworkType!]
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  contractAddress: String
  contractAddress_not: String
  contractAddress_gt: String
  contractAddress_lt: String
  contractAddress_gte: String
  contractAddress_lte: String
  contractAddress_in: [String!]
  contractAddress_not_in: [String!]
  contractAddress_contains: String
  contractAddress_contains_nocase: String
  contractAddress_not_contains: String
  contractAddress_not_contains_nocase: String
  contractAddress_starts_with: String
  contractAddress_starts_with_nocase: String
  contractAddress_not_starts_with: String
  contractAddress_not_starts_with_nocase: String
  contractAddress_ends_with: String
  contractAddress_ends_with_nocase: String
  contractAddress_not_ends_with: String
  contractAddress_not_ends_with_nocase: String
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  timelockAddress: String
  timelockAddress_not: String
  timelockAddress_gt: String
  timelockAddress_lt: String
  timelockAddress_gte: String
  timelockAddress_lte: String
  timelockAddress_in: [String!]
  timelockAddress_not_in: [String!]
  timelockAddress_contains: String
  timelockAddress_contains_nocase: String
  timelockAddress_not_contains: String
  timelockAddress_not_contains_nocase: String
  timelockAddress_starts_with: String
  timelockAddress_starts_with_nocase: String
  timelockAddress_not_starts_with: String
  timelockAddress_not_starts_with_nocase: String
  timelockAddress_ends_with: String
  timelockAddress_ends_with_nocase: String
  timelockAddress_not_ends_with: String
  timelockAddress_not_ends_with_nocase: String
  votingDelay: BigInt
  votingDelay_not: BigInt
  votingDelay_gt: BigInt
  votingDelay_lt: BigInt
  votingDelay_gte: BigInt
  votingDelay_lte: BigInt
  votingDelay_in: [BigInt!]
  votingDelay_not_in: [BigInt!]
  votingPeriod: BigInt
  votingPeriod_not: BigInt
  votingPeriod_gt: BigInt
  votingPeriod_lt: BigInt
  votingPeriod_gte: BigInt
  votingPeriod_lte: BigInt
  votingPeriod_in: [BigInt!]
  votingPeriod_not_in: [BigInt!]
  proposalThreshold: BigInt
  proposalThreshold_not: BigInt
  proposalThreshold_gt: BigInt
  proposalThreshold_lt: BigInt
  proposalThreshold_gte: BigInt
  proposalThreshold_lte: BigInt
  proposalThreshold_in: [BigInt!]
  proposalThreshold_not_in: [BigInt!]
  quorumVotes: BigInt
  quorumVotes_not: BigInt
  quorumVotes_gt: BigInt
  quorumVotes_lt: BigInt
  quorumVotes_gte: BigInt
  quorumVotes_lte: BigInt
  quorumVotes_in: [BigInt!]
  quorumVotes_not_in: [BigInt!]
  quorumNumerator: BigInt
  quorumNumerator_not: BigInt
  quorumNumerator_gt: BigInt
  quorumNumerator_lt: BigInt
  quorumNumerator_gte: BigInt
  quorumNumerator_lte: BigInt
  quorumNumerator_in: [BigInt!]
  quorumNumerator_not_in: [BigInt!]
  quorumDenominator: BigInt
  quorumDenominator_not: BigInt
  quorumDenominator_gt: BigInt
  quorumDenominator_lt: BigInt
  quorumDenominator_gte: BigInt
  quorumDenominator_lte: BigInt
  quorumDenominator_in: [BigInt!]
  quorumDenominator_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum GovernanceFramework_orderBy {
  id
  name
  type
  version
  contractAddress
  tokenAddress
  timelockAddress
  votingDelay
  votingPeriod
  proposalThreshold
  quorumVotes
  quorumNumerator
  quorumDenominator
}

input Governance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalTokenSupply: BigInt
  totalTokenSupply_not: BigInt
  totalTokenSupply_gt: BigInt
  totalTokenSupply_lt: BigInt
  totalTokenSupply_gte: BigInt
  totalTokenSupply_lte: BigInt
  totalTokenSupply_in: [BigInt!]
  totalTokenSupply_not_in: [BigInt!]
  currentTokenHolders: BigInt
  currentTokenHolders_not: BigInt
  currentTokenHolders_gt: BigInt
  currentTokenHolders_lt: BigInt
  currentTokenHolders_gte: BigInt
  currentTokenHolders_lte: BigInt
  currentTokenHolders_in: [BigInt!]
  currentTokenHolders_not_in: [BigInt!]
  totalTokenHolders: BigInt
  totalTokenHolders_not: BigInt
  totalTokenHolders_gt: BigInt
  totalTokenHolders_lt: BigInt
  totalTokenHolders_gte: BigInt
  totalTokenHolders_lte: BigInt
  totalTokenHolders_in: [BigInt!]
  totalTokenHolders_not_in: [BigInt!]
  currentDelegates: BigInt
  currentDelegates_not: BigInt
  currentDelegates_gt: BigInt
  currentDelegates_lt: BigInt
  currentDelegates_gte: BigInt
  currentDelegates_lte: BigInt
  currentDelegates_in: [BigInt!]
  currentDelegates_not_in: [BigInt!]
  totalDelegates: BigInt
  totalDelegates_not: BigInt
  totalDelegates_gt: BigInt
  totalDelegates_lt: BigInt
  totalDelegates_gte: BigInt
  totalDelegates_lte: BigInt
  totalDelegates_in: [BigInt!]
  totalDelegates_not_in: [BigInt!]
  delegatedVotesRaw: BigInt
  delegatedVotesRaw_not: BigInt
  delegatedVotesRaw_gt: BigInt
  delegatedVotesRaw_lt: BigInt
  delegatedVotesRaw_gte: BigInt
  delegatedVotesRaw_lte: BigInt
  delegatedVotesRaw_in: [BigInt!]
  delegatedVotesRaw_not_in: [BigInt!]
  delegatedVotes: BigDecimal
  delegatedVotes_not: BigDecimal
  delegatedVotes_gt: BigDecimal
  delegatedVotes_lt: BigDecimal
  delegatedVotes_gte: BigDecimal
  delegatedVotes_lte: BigDecimal
  delegatedVotes_in: [BigDecimal!]
  delegatedVotes_not_in: [BigDecimal!]
  proposals: BigInt
  proposals_not: BigInt
  proposals_gt: BigInt
  proposals_lt: BigInt
  proposals_gte: BigInt
  proposals_lte: BigInt
  proposals_in: [BigInt!]
  proposals_not_in: [BigInt!]
  proposalsQueued: BigInt
  proposalsQueued_not: BigInt
  proposalsQueued_gt: BigInt
  proposalsQueued_lt: BigInt
  proposalsQueued_gte: BigInt
  proposalsQueued_lte: BigInt
  proposalsQueued_in: [BigInt!]
  proposalsQueued_not_in: [BigInt!]
  proposalsExecuted: BigInt
  proposalsExecuted_not: BigInt
  proposalsExecuted_gt: BigInt
  proposalsExecuted_lt: BigInt
  proposalsExecuted_gte: BigInt
  proposalsExecuted_lte: BigInt
  proposalsExecuted_in: [BigInt!]
  proposalsExecuted_not_in: [BigInt!]
  proposalsCanceled: BigInt
  proposalsCanceled_not: BigInt
  proposalsCanceled_gt: BigInt
  proposalsCanceled_lt: BigInt
  proposalsCanceled_gte: BigInt
  proposalsCanceled_lte: BigInt
  proposalsCanceled_in: [BigInt!]
  proposalsCanceled_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Governance_orderBy {
  id
  totalTokenSupply
  currentTokenHolders
  totalTokenHolders
  currentDelegates
  totalDelegates
  delegatedVotesRaw
  delegatedVotes
  proposals
  proposalsQueued
  proposalsExecuted
  proposalsCanceled
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Proposal {
  """
  Internal proposal ID, in this implementation it seems to be a autoincremental id
  """
  id: ID!
  """Transaction hash of the proposal creation"""
  txnHash: String!
  """Proposal description in markdown format"""
  description: String!
  """Governance Framework that proposal is part of"""
  governanceFramework: GovernanceFramework!
  """Delegate that proposed the proposal"""
  proposer: Delegate!
  """State of the proposal"""
  state: ProposalState!
  """The number of votes for a proposal to succeed."""
  quorumVotes: BigInt!
  """Number of tokenholders at start of voting"""
  tokenHoldersAtStart: BigInt!
  """Number of delegates at start of voting"""
  delegatesAtStart: BigInt!
  """Number of delegates that voted against the proposal"""
  againstDelegateVotes: BigInt!
  """Number of delegates that voted for the proposal"""
  forDelegateVotes: BigInt!
  """Number of delegates that voted abstain to the proposal"""
  abstainDelegateVotes: BigInt!
  """Total number of delegates that voted on the proposal"""
  totalDelegateVotes: BigInt!
  """Weighted votes against the proposal"""
  againstWeightedVotes: BigInt!
  """Weighted votes for the proposal"""
  forWeightedVotes: BigInt!
  """Weighted votes abstaining to the proposal"""
  abstainWeightedVotes: BigInt!
  """Total weighted for/against/abstaining votes"""
  totalWeightedVotes: BigInt!
  """Votes associated to this proposal"""
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]!
  """Block number proposal was created in"""
  creationBlock: BigInt!
  """Timestamp of block proposal was created in"""
  creationTime: BigInt!
  """Block number from where the voting starts"""
  startBlock: BigInt!
  """Block number from where the voting ends"""
  endBlock: BigInt!
  """Transaction hash of the proposal being queued"""
  queueTxnHash: String
  """Block number proposal was queued in"""
  queueBlock: BigInt
  """Timestamp of block proposal was queued in"""
  queueTime: BigInt
  """
  Once the proposal is queued for execution it will have an ETA of the execution
  """
  executionETA: BigInt
  """Transaction hash of the proposal execution"""
  executionTxnHash: String
  """Block number proposal was executed in"""
  executionBlock: BigInt
  """Timestamp of block proposal was executed in"""
  executionTime: BigInt
  """Transaction hash of the proposal cancellation"""
  cancellationTxnHash: String
  """Block number proposal was canceled in"""
  cancellationBlock: BigInt
  """Timestamp of block proposal was canceled in"""
  cancellationTime: BigInt
  """Targets data for the change"""
  targets: [String!]
  """Values data for the change"""
  values: [BigInt!]
  """Signature data for the change"""
  signatures: [String!]
  """Call data for the change"""
  calldatas: [Bytes!]
}

enum ProposalState {
  PENDING
  ACTIVE
  CANCELED
  DEFEATED
  SUCCEEDED
  QUEUED
  EXPIRED
  EXECUTED
}

input Proposal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txnHash: String
  txnHash_not: String
  txnHash_gt: String
  txnHash_lt: String
  txnHash_gte: String
  txnHash_lte: String
  txnHash_in: [String!]
  txnHash_not_in: [String!]
  txnHash_contains: String
  txnHash_contains_nocase: String
  txnHash_not_contains: String
  txnHash_not_contains_nocase: String
  txnHash_starts_with: String
  txnHash_starts_with_nocase: String
  txnHash_not_starts_with: String
  txnHash_not_starts_with_nocase: String
  txnHash_ends_with: String
  txnHash_ends_with_nocase: String
  txnHash_not_ends_with: String
  txnHash_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  governanceFramework: String
  governanceFramework_not: String
  governanceFramework_gt: String
  governanceFramework_lt: String
  governanceFramework_gte: String
  governanceFramework_lte: String
  governanceFramework_in: [String!]
  governanceFramework_not_in: [String!]
  governanceFramework_contains: String
  governanceFramework_contains_nocase: String
  governanceFramework_not_contains: String
  governanceFramework_not_contains_nocase: String
  governanceFramework_starts_with: String
  governanceFramework_starts_with_nocase: String
  governanceFramework_not_starts_with: String
  governanceFramework_not_starts_with_nocase: String
  governanceFramework_ends_with: String
  governanceFramework_ends_with_nocase: String
  governanceFramework_not_ends_with: String
  governanceFramework_not_ends_with_nocase: String
  governanceFramework_: GovernanceFramework_filter
  proposer: String
  proposer_not: String
  proposer_gt: String
  proposer_lt: String
  proposer_gte: String
  proposer_lte: String
  proposer_in: [String!]
  proposer_not_in: [String!]
  proposer_contains: String
  proposer_contains_nocase: String
  proposer_not_contains: String
  proposer_not_contains_nocase: String
  proposer_starts_with: String
  proposer_starts_with_nocase: String
  proposer_not_starts_with: String
  proposer_not_starts_with_nocase: String
  proposer_ends_with: String
  proposer_ends_with_nocase: String
  proposer_not_ends_with: String
  proposer_not_ends_with_nocase: String
  proposer_: Delegate_filter
  state: ProposalState
  state_not: ProposalState
  state_in: [ProposalState!]
  state_not_in: [ProposalState!]
  quorumVotes: BigInt
  quorumVotes_not: BigInt
  quorumVotes_gt: BigInt
  quorumVotes_lt: BigInt
  quorumVotes_gte: BigInt
  quorumVotes_lte: BigInt
  quorumVotes_in: [BigInt!]
  quorumVotes_not_in: [BigInt!]
  tokenHoldersAtStart: BigInt
  tokenHoldersAtStart_not: BigInt
  tokenHoldersAtStart_gt: BigInt
  tokenHoldersAtStart_lt: BigInt
  tokenHoldersAtStart_gte: BigInt
  tokenHoldersAtStart_lte: BigInt
  tokenHoldersAtStart_in: [BigInt!]
  tokenHoldersAtStart_not_in: [BigInt!]
  delegatesAtStart: BigInt
  delegatesAtStart_not: BigInt
  delegatesAtStart_gt: BigInt
  delegatesAtStart_lt: BigInt
  delegatesAtStart_gte: BigInt
  delegatesAtStart_lte: BigInt
  delegatesAtStart_in: [BigInt!]
  delegatesAtStart_not_in: [BigInt!]
  againstDelegateVotes: BigInt
  againstDelegateVotes_not: BigInt
  againstDelegateVotes_gt: BigInt
  againstDelegateVotes_lt: BigInt
  againstDelegateVotes_gte: BigInt
  againstDelegateVotes_lte: BigInt
  againstDelegateVotes_in: [BigInt!]
  againstDelegateVotes_not_in: [BigInt!]
  forDelegateVotes: BigInt
  forDelegateVotes_not: BigInt
  forDelegateVotes_gt: BigInt
  forDelegateVotes_lt: BigInt
  forDelegateVotes_gte: BigInt
  forDelegateVotes_lte: BigInt
  forDelegateVotes_in: [BigInt!]
  forDelegateVotes_not_in: [BigInt!]
  abstainDelegateVotes: BigInt
  abstainDelegateVotes_not: BigInt
  abstainDelegateVotes_gt: BigInt
  abstainDelegateVotes_lt: BigInt
  abstainDelegateVotes_gte: BigInt
  abstainDelegateVotes_lte: BigInt
  abstainDelegateVotes_in: [BigInt!]
  abstainDelegateVotes_not_in: [BigInt!]
  totalDelegateVotes: BigInt
  totalDelegateVotes_not: BigInt
  totalDelegateVotes_gt: BigInt
  totalDelegateVotes_lt: BigInt
  totalDelegateVotes_gte: BigInt
  totalDelegateVotes_lte: BigInt
  totalDelegateVotes_in: [BigInt!]
  totalDelegateVotes_not_in: [BigInt!]
  againstWeightedVotes: BigInt
  againstWeightedVotes_not: BigInt
  againstWeightedVotes_gt: BigInt
  againstWeightedVotes_lt: BigInt
  againstWeightedVotes_gte: BigInt
  againstWeightedVotes_lte: BigInt
  againstWeightedVotes_in: [BigInt!]
  againstWeightedVotes_not_in: [BigInt!]
  forWeightedVotes: BigInt
  forWeightedVotes_not: BigInt
  forWeightedVotes_gt: BigInt
  forWeightedVotes_lt: BigInt
  forWeightedVotes_gte: BigInt
  forWeightedVotes_lte: BigInt
  forWeightedVotes_in: [BigInt!]
  forWeightedVotes_not_in: [BigInt!]
  abstainWeightedVotes: BigInt
  abstainWeightedVotes_not: BigInt
  abstainWeightedVotes_gt: BigInt
  abstainWeightedVotes_lt: BigInt
  abstainWeightedVotes_gte: BigInt
  abstainWeightedVotes_lte: BigInt
  abstainWeightedVotes_in: [BigInt!]
  abstainWeightedVotes_not_in: [BigInt!]
  totalWeightedVotes: BigInt
  totalWeightedVotes_not: BigInt
  totalWeightedVotes_gt: BigInt
  totalWeightedVotes_lt: BigInt
  totalWeightedVotes_gte: BigInt
  totalWeightedVotes_lte: BigInt
  totalWeightedVotes_in: [BigInt!]
  totalWeightedVotes_not_in: [BigInt!]
  votes_: Vote_filter
  creationBlock: BigInt
  creationBlock_not: BigInt
  creationBlock_gt: BigInt
  creationBlock_lt: BigInt
  creationBlock_gte: BigInt
  creationBlock_lte: BigInt
  creationBlock_in: [BigInt!]
  creationBlock_not_in: [BigInt!]
  creationTime: BigInt
  creationTime_not: BigInt
  creationTime_gt: BigInt
  creationTime_lt: BigInt
  creationTime_gte: BigInt
  creationTime_lte: BigInt
  creationTime_in: [BigInt!]
  creationTime_not_in: [BigInt!]
  startBlock: BigInt
  startBlock_not: BigInt
  startBlock_gt: BigInt
  startBlock_lt: BigInt
  startBlock_gte: BigInt
  startBlock_lte: BigInt
  startBlock_in: [BigInt!]
  startBlock_not_in: [BigInt!]
  endBlock: BigInt
  endBlock_not: BigInt
  endBlock_gt: BigInt
  endBlock_lt: BigInt
  endBlock_gte: BigInt
  endBlock_lte: BigInt
  endBlock_in: [BigInt!]
  endBlock_not_in: [BigInt!]
  queueTxnHash: String
  queueTxnHash_not: String
  queueTxnHash_gt: String
  queueTxnHash_lt: String
  queueTxnHash_gte: String
  queueTxnHash_lte: String
  queueTxnHash_in: [String!]
  queueTxnHash_not_in: [String!]
  queueTxnHash_contains: String
  queueTxnHash_contains_nocase: String
  queueTxnHash_not_contains: String
  queueTxnHash_not_contains_nocase: String
  queueTxnHash_starts_with: String
  queueTxnHash_starts_with_nocase: String
  queueTxnHash_not_starts_with: String
  queueTxnHash_not_starts_with_nocase: String
  queueTxnHash_ends_with: String
  queueTxnHash_ends_with_nocase: String
  queueTxnHash_not_ends_with: String
  queueTxnHash_not_ends_with_nocase: String
  queueBlock: BigInt
  queueBlock_not: BigInt
  queueBlock_gt: BigInt
  queueBlock_lt: BigInt
  queueBlock_gte: BigInt
  queueBlock_lte: BigInt
  queueBlock_in: [BigInt!]
  queueBlock_not_in: [BigInt!]
  queueTime: BigInt
  queueTime_not: BigInt
  queueTime_gt: BigInt
  queueTime_lt: BigInt
  queueTime_gte: BigInt
  queueTime_lte: BigInt
  queueTime_in: [BigInt!]
  queueTime_not_in: [BigInt!]
  executionETA: BigInt
  executionETA_not: BigInt
  executionETA_gt: BigInt
  executionETA_lt: BigInt
  executionETA_gte: BigInt
  executionETA_lte: BigInt
  executionETA_in: [BigInt!]
  executionETA_not_in: [BigInt!]
  executionTxnHash: String
  executionTxnHash_not: String
  executionTxnHash_gt: String
  executionTxnHash_lt: String
  executionTxnHash_gte: String
  executionTxnHash_lte: String
  executionTxnHash_in: [String!]
  executionTxnHash_not_in: [String!]
  executionTxnHash_contains: String
  executionTxnHash_contains_nocase: String
  executionTxnHash_not_contains: String
  executionTxnHash_not_contains_nocase: String
  executionTxnHash_starts_with: String
  executionTxnHash_starts_with_nocase: String
  executionTxnHash_not_starts_with: String
  executionTxnHash_not_starts_with_nocase: String
  executionTxnHash_ends_with: String
  executionTxnHash_ends_with_nocase: String
  executionTxnHash_not_ends_with: String
  executionTxnHash_not_ends_with_nocase: String
  executionBlock: BigInt
  executionBlock_not: BigInt
  executionBlock_gt: BigInt
  executionBlock_lt: BigInt
  executionBlock_gte: BigInt
  executionBlock_lte: BigInt
  executionBlock_in: [BigInt!]
  executionBlock_not_in: [BigInt!]
  executionTime: BigInt
  executionTime_not: BigInt
  executionTime_gt: BigInt
  executionTime_lt: BigInt
  executionTime_gte: BigInt
  executionTime_lte: BigInt
  executionTime_in: [BigInt!]
  executionTime_not_in: [BigInt!]
  cancellationTxnHash: String
  cancellationTxnHash_not: String
  cancellationTxnHash_gt: String
  cancellationTxnHash_lt: String
  cancellationTxnHash_gte: String
  cancellationTxnHash_lte: String
  cancellationTxnHash_in: [String!]
  cancellationTxnHash_not_in: [String!]
  cancellationTxnHash_contains: String
  cancellationTxnHash_contains_nocase: String
  cancellationTxnHash_not_contains: String
  cancellationTxnHash_not_contains_nocase: String
  cancellationTxnHash_starts_with: String
  cancellationTxnHash_starts_with_nocase: String
  cancellationTxnHash_not_starts_with: String
  cancellationTxnHash_not_starts_with_nocase: String
  cancellationTxnHash_ends_with: String
  cancellationTxnHash_ends_with_nocase: String
  cancellationTxnHash_not_ends_with: String
  cancellationTxnHash_not_ends_with_nocase: String
  cancellationBlock: BigInt
  cancellationBlock_not: BigInt
  cancellationBlock_gt: BigInt
  cancellationBlock_lt: BigInt
  cancellationBlock_gte: BigInt
  cancellationBlock_lte: BigInt
  cancellationBlock_in: [BigInt!]
  cancellationBlock_not_in: [BigInt!]
  cancellationTime: BigInt
  cancellationTime_not: BigInt
  cancellationTime_gt: BigInt
  cancellationTime_lt: BigInt
  cancellationTime_gte: BigInt
  cancellationTime_lte: BigInt
  cancellationTime_in: [BigInt!]
  cancellationTime_not_in: [BigInt!]
  targets: [String!]
  targets_not: [String!]
  targets_contains: [String!]
  targets_contains_nocase: [String!]
  targets_not_contains: [String!]
  targets_not_contains_nocase: [String!]
  values: [BigInt!]
  values_not: [BigInt!]
  values_contains: [BigInt!]
  values_contains_nocase: [BigInt!]
  values_not_contains: [BigInt!]
  values_not_contains_nocase: [BigInt!]
  signatures: [String!]
  signatures_not: [String!]
  signatures_contains: [String!]
  signatures_contains_nocase: [String!]
  signatures_not_contains: [String!]
  signatures_not_contains_nocase: [String!]
  calldatas: [Bytes!]
  calldatas_not: [Bytes!]
  calldatas_contains: [Bytes!]
  calldatas_contains_nocase: [Bytes!]
  calldatas_not_contains: [Bytes!]
  calldatas_not_contains_nocase: [Bytes!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Proposal_orderBy {
  id
  txnHash
  description
  governanceFramework
  proposer
  state
  quorumVotes
  tokenHoldersAtStart
  delegatesAtStart
  againstDelegateVotes
  forDelegateVotes
  abstainDelegateVotes
  totalDelegateVotes
  againstWeightedVotes
  forWeightedVotes
  abstainWeightedVotes
  totalWeightedVotes
  votes
  creationBlock
  creationTime
  startBlock
  endBlock
  queueTxnHash
  queueBlock
  queueTime
  executionETA
  executionTxnHash
  executionBlock
  executionTime
  cancellationTxnHash
  cancellationBlock
  cancellationTime
  targets
  values
  signatures
  calldatas
}

type Query {
  delegateChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DelegateChange
  delegateChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: DelegateChange_orderBy
    orderDirection: OrderDirection
    where: DelegateChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DelegateChange!]!
  delegateVotingPowerChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DelegateVotingPowerChange
  delegateVotingPowerChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: DelegateVotingPowerChange_orderBy
    orderDirection: OrderDirection
    where: DelegateVotingPowerChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DelegateVotingPowerChange!]!
  governance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Governance
  governances(
    skip: Int = 0
    first: Int = 100
    orderBy: Governance_orderBy
    orderDirection: OrderDirection
    where: Governance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Governance!]!
  governanceFramework(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GovernanceFramework
  governanceFrameworks(
    skip: Int = 0
    first: Int = 100
    orderBy: GovernanceFramework_orderBy
    orderDirection: OrderDirection
    where: GovernanceFramework_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GovernanceFramework!]!
  proposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proposal
  proposals(
    skip: Int = 0
    first: Int = 100
    orderBy: Proposal_orderBy
    orderDirection: OrderDirection
    where: Proposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proposal!]!
  vote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  tokenHolder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenHolder
  tokenHolders(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenHolder_orderBy
    orderDirection: OrderDirection
    where: TokenHolder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenHolder!]!
  delegate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Delegate
  delegates(
    skip: Int = 0
    first: Int = 100
    orderBy: Delegate_orderBy
    orderDirection: OrderDirection
    where: Delegate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Delegate!]!
  tokenDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDailySnapshot
  tokenDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDailySnapshot!]!
  voteDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VoteDailySnapshot
  voteDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: VoteDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: VoteDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VoteDailySnapshot!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  delegateChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DelegateChange
  delegateChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: DelegateChange_orderBy
    orderDirection: OrderDirection
    where: DelegateChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DelegateChange!]!
  delegateVotingPowerChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DelegateVotingPowerChange
  delegateVotingPowerChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: DelegateVotingPowerChange_orderBy
    orderDirection: OrderDirection
    where: DelegateVotingPowerChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DelegateVotingPowerChange!]!
  governance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Governance
  governances(
    skip: Int = 0
    first: Int = 100
    orderBy: Governance_orderBy
    orderDirection: OrderDirection
    where: Governance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Governance!]!
  governanceFramework(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GovernanceFramework
  governanceFrameworks(
    skip: Int = 0
    first: Int = 100
    orderBy: GovernanceFramework_orderBy
    orderDirection: OrderDirection
    where: GovernanceFramework_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GovernanceFramework!]!
  proposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proposal
  proposals(
    skip: Int = 0
    first: Int = 100
    orderBy: Proposal_orderBy
    orderDirection: OrderDirection
    where: Proposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proposal!]!
  vote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  tokenHolder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenHolder
  tokenHolders(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenHolder_orderBy
    orderDirection: OrderDirection
    where: TokenHolder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenHolder!]!
  delegate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Delegate
  delegates(
    skip: Int = 0
    first: Int = 100
    orderBy: Delegate_orderBy
    orderDirection: OrderDirection
    where: Delegate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Delegate!]!
  tokenDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDailySnapshot
  tokenDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDailySnapshot!]!
  voteDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VoteDailySnapshot
  voteDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: VoteDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: VoteDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VoteDailySnapshot!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type TokenDailySnapshot {
  """Number of days from Unix epoch time"""
  id: ID!
  """Total Supply at snapshot"""
  totalSupply: BigInt!
  """Number of tokenholders at snapshot"""
  tokenHolders: BigInt!
  """Number of delegates at snapshot"""
  delegates: BigInt!
  """Block number of last block in snapshot"""
  blockNumber: BigInt!
  """Timestamp of snapshot"""
  timestamp: BigInt!
}

input TokenDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  tokenHolders: BigInt
  tokenHolders_not: BigInt
  tokenHolders_gt: BigInt
  tokenHolders_lt: BigInt
  tokenHolders_gte: BigInt
  tokenHolders_lte: BigInt
  tokenHolders_in: [BigInt!]
  tokenHolders_not_in: [BigInt!]
  delegates: BigInt
  delegates_not: BigInt
  delegates_gt: BigInt
  delegates_lt: BigInt
  delegates_gte: BigInt
  delegates_lte: BigInt
  delegates_in: [BigInt!]
  delegates_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TokenDailySnapshot_orderBy {
  id
  totalSupply
  tokenHolders
  delegates
  blockNumber
  timestamp
}

type TokenHolder {
  """
  A TokenHolder is any address that holds any amount of tokens, the id used is the blockchain address.
  """
  id: String!
  """
  Delegate address of the token holder which will participate in votings. Delegates don't need to hold any tokens and can even be the token holder itself.
  """
  delegate: Delegate
  """
  Token balance of this address expressed in the smallest unit of the token
  """
  tokenBalanceRaw: BigInt!
  """
  Token balance of this address expressed as a BigDecimal normalized value
  """
  tokenBalance: BigDecimal!
  """
  Total amount of tokens ever held by this address expressed in the smallest unit of the token
  """
  totalTokensHeldRaw: BigInt!
  """
  Total amount of tokens ever held by this address expressed as a BigDecimal normalized value
  """
  totalTokensHeld: BigDecimal!
}

input TokenHolder_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  delegate: String
  delegate_not: String
  delegate_gt: String
  delegate_lt: String
  delegate_gte: String
  delegate_lte: String
  delegate_in: [String!]
  delegate_not_in: [String!]
  delegate_contains: String
  delegate_contains_nocase: String
  delegate_not_contains: String
  delegate_not_contains_nocase: String
  delegate_starts_with: String
  delegate_starts_with_nocase: String
  delegate_not_starts_with: String
  delegate_not_starts_with_nocase: String
  delegate_ends_with: String
  delegate_ends_with_nocase: String
  delegate_not_ends_with: String
  delegate_not_ends_with_nocase: String
  delegate_: Delegate_filter
  tokenBalanceRaw: BigInt
  tokenBalanceRaw_not: BigInt
  tokenBalanceRaw_gt: BigInt
  tokenBalanceRaw_lt: BigInt
  tokenBalanceRaw_gte: BigInt
  tokenBalanceRaw_lte: BigInt
  tokenBalanceRaw_in: [BigInt!]
  tokenBalanceRaw_not_in: [BigInt!]
  tokenBalance: BigDecimal
  tokenBalance_not: BigDecimal
  tokenBalance_gt: BigDecimal
  tokenBalance_lt: BigDecimal
  tokenBalance_gte: BigDecimal
  tokenBalance_lte: BigDecimal
  tokenBalance_in: [BigDecimal!]
  tokenBalance_not_in: [BigDecimal!]
  totalTokensHeldRaw: BigInt
  totalTokensHeldRaw_not: BigInt
  totalTokensHeldRaw_gt: BigInt
  totalTokensHeldRaw_lt: BigInt
  totalTokensHeldRaw_gte: BigInt
  totalTokensHeldRaw_lte: BigInt
  totalTokensHeldRaw_in: [BigInt!]
  totalTokensHeldRaw_not_in: [BigInt!]
  totalTokensHeld: BigDecimal
  totalTokensHeld_not: BigDecimal
  totalTokensHeld_gt: BigDecimal
  totalTokensHeld_lt: BigDecimal
  totalTokensHeld_gte: BigDecimal
  totalTokensHeld_lte: BigDecimal
  totalTokensHeld_in: [BigDecimal!]
  totalTokensHeld_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TokenHolder_orderBy {
  id
  delegate
  tokenBalanceRaw
  tokenBalance
  totalTokensHeldRaw
  totalTokensHeld
}

type Vote {
  """Delegate ID + Proposal ID"""
  id: ID!
  """Whether the vote is in favour, against or abstaining to the proposal"""
  choice: VoteChoice!
  """Voting weight expressed in the vote"""
  weight: BigInt!
  """Reason for voting choice"""
  reason: String
  """Delegate that emitted the vote"""
  voter: Delegate!
  """Proposal that is being voted on"""
  proposal: Proposal!
  """Block number vote is cast in"""
  block: BigInt!
  """Timestamp of block vote was cast in"""
  blockTime: BigInt!
  """Transaction hash of the vote"""
  txnHash: String!
}

enum VoteChoice {
  FOR
  AGAINST
  ABSTAIN
}

type VoteDailySnapshot {
  """Number of days from Unix epoch time"""
  id: ID!
  """Proposal this snapshot is associated with"""
  proposal: Proposal!
  """Weighted votes against the proposal at snapshot"""
  forWeightedVotes: BigInt!
  """Weighted votes abstaining to the proposal at snapshot"""
  againstWeightedVotes: BigInt!
  """Weighted votes for the proposal at snapshot"""
  abstainWeightedVotes: BigInt!
  """Total weighted for/against/abstaining votes at snapshot"""
  totalWeightedVotes: BigInt!
  """Block number of last block in snapshot"""
  blockNumber: BigInt!
  """Timestamp of snapshot"""
  timestamp: BigInt!
}

input VoteDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: Proposal_filter
  forWeightedVotes: BigInt
  forWeightedVotes_not: BigInt
  forWeightedVotes_gt: BigInt
  forWeightedVotes_lt: BigInt
  forWeightedVotes_gte: BigInt
  forWeightedVotes_lte: BigInt
  forWeightedVotes_in: [BigInt!]
  forWeightedVotes_not_in: [BigInt!]
  againstWeightedVotes: BigInt
  againstWeightedVotes_not: BigInt
  againstWeightedVotes_gt: BigInt
  againstWeightedVotes_lt: BigInt
  againstWeightedVotes_gte: BigInt
  againstWeightedVotes_lte: BigInt
  againstWeightedVotes_in: [BigInt!]
  againstWeightedVotes_not_in: [BigInt!]
  abstainWeightedVotes: BigInt
  abstainWeightedVotes_not: BigInt
  abstainWeightedVotes_gt: BigInt
  abstainWeightedVotes_lt: BigInt
  abstainWeightedVotes_gte: BigInt
  abstainWeightedVotes_lte: BigInt
  abstainWeightedVotes_in: [BigInt!]
  abstainWeightedVotes_not_in: [BigInt!]
  totalWeightedVotes: BigInt
  totalWeightedVotes_not: BigInt
  totalWeightedVotes_gt: BigInt
  totalWeightedVotes_lt: BigInt
  totalWeightedVotes_gte: BigInt
  totalWeightedVotes_lte: BigInt
  totalWeightedVotes_in: [BigInt!]
  totalWeightedVotes_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum VoteDailySnapshot_orderBy {
  id
  proposal
  forWeightedVotes
  againstWeightedVotes
  abstainWeightedVotes
  totalWeightedVotes
  blockNumber
  timestamp
}

input Vote_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  choice: VoteChoice
  choice_not: VoteChoice
  choice_in: [VoteChoice!]
  choice_not_in: [VoteChoice!]
  weight: BigInt
  weight_not: BigInt
  weight_gt: BigInt
  weight_lt: BigInt
  weight_gte: BigInt
  weight_lte: BigInt
  weight_in: [BigInt!]
  weight_not_in: [BigInt!]
  reason: String
  reason_not: String
  reason_gt: String
  reason_lt: String
  reason_gte: String
  reason_lte: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_contains: String
  reason_contains_nocase: String
  reason_not_contains: String
  reason_not_contains_nocase: String
  reason_starts_with: String
  reason_starts_with_nocase: String
  reason_not_starts_with: String
  reason_not_starts_with_nocase: String
  reason_ends_with: String
  reason_ends_with_nocase: String
  reason_not_ends_with: String
  reason_not_ends_with_nocase: String
  voter: String
  voter_not: String
  voter_gt: String
  voter_lt: String
  voter_gte: String
  voter_lte: String
  voter_in: [String!]
  voter_not_in: [String!]
  voter_contains: String
  voter_contains_nocase: String
  voter_not_contains: String
  voter_not_contains_nocase: String
  voter_starts_with: String
  voter_starts_with_nocase: String
  voter_not_starts_with: String
  voter_not_starts_with_nocase: String
  voter_ends_with: String
  voter_ends_with_nocase: String
  voter_not_ends_with: String
  voter_not_ends_with_nocase: String
  voter_: Delegate_filter
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: Proposal_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  blockTime: BigInt
  blockTime_not: BigInt
  blockTime_gt: BigInt
  blockTime_lt: BigInt
  blockTime_gte: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
  blockTime_not_in: [BigInt!]
  txnHash: String
  txnHash_not: String
  txnHash_gt: String
  txnHash_lt: String
  txnHash_gte: String
  txnHash_lte: String
  txnHash_in: [String!]
  txnHash_not_in: [String!]
  txnHash_contains: String
  txnHash_contains_nocase: String
  txnHash_not_contains: String
  txnHash_not_contains_nocase: String
  txnHash_starts_with: String
  txnHash_starts_with_nocase: String
  txnHash_not_starts_with: String
  txnHash_not_starts_with_nocase: String
  txnHash_ends_with: String
  txnHash_ends_with_nocase: String
  txnHash_not_ends_with: String
  txnHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Vote_orderBy {
  id
  choice
  weight
  reason
  voter
  proposal
  block
  blockTime
  txnHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}