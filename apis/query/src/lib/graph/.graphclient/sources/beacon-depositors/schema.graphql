schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Aggregation {
  id: ID!
  totalDeposits: BigInt
  totalDepositors: BigInt
  totalAmountDeposited: BigInt
}

input Aggregation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalDeposits: BigInt
  totalDeposits_not: BigInt
  totalDeposits_gt: BigInt
  totalDeposits_lt: BigInt
  totalDeposits_gte: BigInt
  totalDeposits_lte: BigInt
  totalDeposits_in: [BigInt!]
  totalDeposits_not_in: [BigInt!]
  totalDepositors: BigInt
  totalDepositors_not: BigInt
  totalDepositors_gt: BigInt
  totalDepositors_lt: BigInt
  totalDepositors_gte: BigInt
  totalDepositors_lte: BigInt
  totalDepositors_in: [BigInt!]
  totalDepositors_not_in: [BigInt!]
  totalAmountDeposited: BigInt
  totalAmountDeposited_not: BigInt
  totalAmountDeposited_gt: BigInt
  totalAmountDeposited_lt: BigInt
  totalAmountDeposited_gte: BigInt
  totalAmountDeposited_lte: BigInt
  totalAmountDeposited_in: [BigInt!]
  totalAmountDeposited_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Aggregation_orderBy {
  id
  totalDeposits
  totalDepositors
  totalAmountDeposited
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type DailyDeposit {
  id: ID!
  dailyAmountDeposited: BigInt
  dailyDepositCount: BigInt
}

input DailyDeposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dailyAmountDeposited: BigInt
  dailyAmountDeposited_not: BigInt
  dailyAmountDeposited_gt: BigInt
  dailyAmountDeposited_lt: BigInt
  dailyAmountDeposited_gte: BigInt
  dailyAmountDeposited_lte: BigInt
  dailyAmountDeposited_in: [BigInt!]
  dailyAmountDeposited_not_in: [BigInt!]
  dailyDepositCount: BigInt
  dailyDepositCount_not: BigInt
  dailyDepositCount_gt: BigInt
  dailyDepositCount_lt: BigInt
  dailyDepositCount_gte: BigInt
  dailyDepositCount_lte: BigInt
  dailyDepositCount_in: [BigInt!]
  dailyDepositCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum DailyDeposit_orderBy {
  id
  dailyAmountDeposited
  dailyDepositCount
}

type Deposit {
  id: ID!
  dayID: String!
  depositor: Depositor
  pubkey: Bytes!
  withdrawal_credentials: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}

input Deposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayID: String
  dayID_not: String
  dayID_gt: String
  dayID_lt: String
  dayID_gte: String
  dayID_lte: String
  dayID_in: [String!]
  dayID_not_in: [String!]
  dayID_contains: String
  dayID_contains_nocase: String
  dayID_not_contains: String
  dayID_not_contains_nocase: String
  dayID_starts_with: String
  dayID_starts_with_nocase: String
  dayID_not_starts_with: String
  dayID_not_starts_with_nocase: String
  dayID_ends_with: String
  dayID_ends_with_nocase: String
  dayID_not_ends_with: String
  dayID_not_ends_with_nocase: String
  depositor: String
  depositor_not: String
  depositor_gt: String
  depositor_lt: String
  depositor_gte: String
  depositor_lte: String
  depositor_in: [String!]
  depositor_not_in: [String!]
  depositor_contains: String
  depositor_contains_nocase: String
  depositor_not_contains: String
  depositor_not_contains_nocase: String
  depositor_starts_with: String
  depositor_starts_with_nocase: String
  depositor_not_starts_with: String
  depositor_not_starts_with_nocase: String
  depositor_ends_with: String
  depositor_ends_with_nocase: String
  depositor_not_ends_with: String
  depositor_not_ends_with_nocase: String
  depositor_: Depositor_filter
  pubkey: Bytes
  pubkey_not: Bytes
  pubkey_in: [Bytes!]
  pubkey_not_in: [Bytes!]
  pubkey_contains: Bytes
  pubkey_not_contains: Bytes
  withdrawal_credentials: Bytes
  withdrawal_credentials_not: Bytes
  withdrawal_credentials_in: [Bytes!]
  withdrawal_credentials_not_in: [Bytes!]
  withdrawal_credentials_contains: Bytes
  withdrawal_credentials_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Deposit_orderBy {
  id
  dayID
  depositor
  pubkey
  withdrawal_credentials
  amount
  timestamp
}

type Depositor {
  id: ID!
  totalAmountDeposited: BigInt
  depositCount: BigInt
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]
}

input Depositor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalAmountDeposited: BigInt
  totalAmountDeposited_not: BigInt
  totalAmountDeposited_gt: BigInt
  totalAmountDeposited_lt: BigInt
  totalAmountDeposited_gte: BigInt
  totalAmountDeposited_lte: BigInt
  totalAmountDeposited_in: [BigInt!]
  totalAmountDeposited_not_in: [BigInt!]
  depositCount: BigInt
  depositCount_not: BigInt
  depositCount_gt: BigInt
  depositCount_lt: BigInt
  depositCount_gte: BigInt
  depositCount_lte: BigInt
  depositCount_in: [BigInt!]
  depositCount_not_in: [BigInt!]
  deposits_: Deposit_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Depositor_orderBy {
  id
  totalAmountDeposited
  depositCount
  deposits
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  aggregation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Aggregation
  aggregations(
    skip: Int = 0
    first: Int = 100
    orderBy: Aggregation_orderBy
    orderDirection: OrderDirection
    where: Aggregation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Aggregation!]!
  depositor(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Depositor
  depositors(
    skip: Int = 0
    first: Int = 100
    orderBy: Depositor_orderBy
    orderDirection: OrderDirection
    where: Depositor_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Depositor!]!
  dailyDeposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyDeposit
  dailyDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyDeposit_orderBy
    orderDirection: OrderDirection
    where: DailyDeposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyDeposit!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  aggregation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Aggregation
  aggregations(
    skip: Int = 0
    first: Int = 100
    orderBy: Aggregation_orderBy
    orderDirection: OrderDirection
    where: Aggregation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Aggregation!]!
  depositor(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Depositor
  depositors(
    skip: Int = 0
    first: Int = 100
    orderBy: Depositor_orderBy
    orderDirection: OrderDirection
    where: Depositor_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Depositor!]!
  dailyDeposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyDeposit
  dailyDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyDeposit_orderBy
    orderDirection: OrderDirection
    where: DailyDeposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyDeposit!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}