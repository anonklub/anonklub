schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  punk(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Punk
  punks(
    skip: Int = 0
    first: Int = 100
    orderBy: Punk_orderBy
    orderDirection: OrderDirection
    where: Punk_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Punk!]!
  metaData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetaData
  metaDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaData_orderBy
    orderDirection: OrderDirection
    where: MetaData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetaData!]!
  trait(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trait
  traits(
    skip: Int = 0
    first: Int = 100
    orderBy: Trait_orderBy
    orderDirection: OrderDirection
    where: Trait_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trait!]!
  ask(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Ask
  asks(
    skip: Int = 0
    first: Int = 100
    orderBy: Ask_orderBy
    orderDirection: OrderDirection
    where: Ask_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Ask!]!
  bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: Contract_orderBy
    orderDirection: OrderDirection
    where: Contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Contract!]!
  assign(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Assign
  assigns(
    skip: Int = 0
    first: Int = 100
    orderBy: Assign_orderBy
    orderDirection: OrderDirection
    where: Assign_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Assign!]!
  sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sale
  sales(
    skip: Int = 0
    first: Int = 100
    orderBy: Sale_orderBy
    orderDirection: OrderDirection
    where: Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sale!]!
  askCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AskCreated
  askCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: AskCreated_orderBy
    orderDirection: OrderDirection
    where: AskCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AskCreated!]!
  bidCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidCreated
  bidCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: BidCreated_orderBy
    orderDirection: OrderDirection
    where: BidCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BidCreated!]!
  bidRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidRemoved
  bidRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: BidRemoved_orderBy
    orderDirection: OrderDirection
    where: BidRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BidRemoved!]!
  askRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AskRemoved
  askRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: AskRemoved_orderBy
    orderDirection: OrderDirection
    where: AskRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AskRemoved!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  ctoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CToken
  ctokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CToken_orderBy
    orderDirection: OrderDirection
    where: CToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CToken!]!
  wrap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Wrap
  wraps(
    skip: Int = 0
    first: Int = 100
    orderBy: Wrap_orderBy
    orderDirection: OrderDirection
    where: Wrap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Wrap!]!
  unwrap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unwrap
  unwraps(
    skip: Int = 0
    first: Int = 100
    orderBy: Unwrap_orderBy
    orderDirection: OrderDirection
    where: Unwrap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unwrap!]!
  userProxy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserProxy
  userProxies(
    skip: Int = 0
    first: Int = 100
    orderBy: UserProxy_orderBy
    orderDirection: OrderDirection
    where: UserProxy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserProxy!]!
  epnsNotificationCounter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EpnsNotificationCounter
  epnsNotificationCounters(
    skip: Int = 0
    first: Int = 100
    orderBy: EpnsNotificationCounter_orderBy
    orderDirection: OrderDirection
    where: EpnsNotificationCounter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EpnsNotificationCounter!]!
  epnsPushNotification(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EpnsPushNotification
  epnsPushNotifications(
    skip: Int = 0
    first: Int = 100
    orderBy: EpnsPushNotification_orderBy
    orderDirection: OrderDirection
    where: EpnsPushNotification_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EpnsPushNotification!]!
  nft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFT
  nfts(
    skip: Int = 0
    first: Int = 100
    orderBy: NFT_orderBy
    orderDirection: OrderDirection
    where: NFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFT!]!
  event(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  delegateChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DelegateChange
  delegateChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: DelegateChange_orderBy
    orderDirection: OrderDirection
    where: DelegateChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DelegateChange!]!
  delegateVotingPowerChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DelegateVotingPowerChange
  delegateVotingPowerChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: DelegateVotingPowerChange_orderBy
    orderDirection: OrderDirection
    where: DelegateVotingPowerChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DelegateVotingPowerChange!]!
  governance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Governance
  governances(
    skip: Int = 0
    first: Int = 100
    orderBy: Governance_orderBy
    orderDirection: OrderDirection
    where: Governance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Governance!]!
  governanceFramework(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GovernanceFramework
  governanceFrameworks(
    skip: Int = 0
    first: Int = 100
    orderBy: GovernanceFramework_orderBy
    orderDirection: OrderDirection
    where: GovernanceFramework_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GovernanceFramework!]!
  proposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proposal
  proposals(
    skip: Int = 0
    first: Int = 100
    orderBy: Proposal_orderBy
    orderDirection: OrderDirection
    where: Proposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proposal!]!
  vote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  tokenHolder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenHolder
  tokenHolders(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenHolder_orderBy
    orderDirection: OrderDirection
    where: TokenHolder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenHolder!]!
  delegate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Delegate
  delegates(
    skip: Int = 0
    first: Int = 100
    orderBy: Delegate_orderBy
    orderDirection: OrderDirection
    where: Delegate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Delegate!]!
  tokenDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDailySnapshot
  tokenDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDailySnapshot!]!
  voteDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VoteDailySnapshot
  voteDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: VoteDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: VoteDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VoteDailySnapshot!]!
}

type Subscription {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  punk(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Punk
  punks(
    skip: Int = 0
    first: Int = 100
    orderBy: Punk_orderBy
    orderDirection: OrderDirection
    where: Punk_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Punk!]!
  metaData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetaData
  metaDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaData_orderBy
    orderDirection: OrderDirection
    where: MetaData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetaData!]!
  trait(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trait
  traits(
    skip: Int = 0
    first: Int = 100
    orderBy: Trait_orderBy
    orderDirection: OrderDirection
    where: Trait_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trait!]!
  ask(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Ask
  asks(
    skip: Int = 0
    first: Int = 100
    orderBy: Ask_orderBy
    orderDirection: OrderDirection
    where: Ask_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Ask!]!
  bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: Contract_orderBy
    orderDirection: OrderDirection
    where: Contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Contract!]!
  assign(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Assign
  assigns(
    skip: Int = 0
    first: Int = 100
    orderBy: Assign_orderBy
    orderDirection: OrderDirection
    where: Assign_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Assign!]!
  sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sale
  sales(
    skip: Int = 0
    first: Int = 100
    orderBy: Sale_orderBy
    orderDirection: OrderDirection
    where: Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sale!]!
  askCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AskCreated
  askCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: AskCreated_orderBy
    orderDirection: OrderDirection
    where: AskCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AskCreated!]!
  bidCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidCreated
  bidCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: BidCreated_orderBy
    orderDirection: OrderDirection
    where: BidCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BidCreated!]!
  bidRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidRemoved
  bidRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: BidRemoved_orderBy
    orderDirection: OrderDirection
    where: BidRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BidRemoved!]!
  askRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AskRemoved
  askRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: AskRemoved_orderBy
    orderDirection: OrderDirection
    where: AskRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AskRemoved!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  ctoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CToken
  ctokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CToken_orderBy
    orderDirection: OrderDirection
    where: CToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CToken!]!
  wrap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Wrap
  wraps(
    skip: Int = 0
    first: Int = 100
    orderBy: Wrap_orderBy
    orderDirection: OrderDirection
    where: Wrap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Wrap!]!
  unwrap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unwrap
  unwraps(
    skip: Int = 0
    first: Int = 100
    orderBy: Unwrap_orderBy
    orderDirection: OrderDirection
    where: Unwrap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unwrap!]!
  userProxy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserProxy
  userProxies(
    skip: Int = 0
    first: Int = 100
    orderBy: UserProxy_orderBy
    orderDirection: OrderDirection
    where: UserProxy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserProxy!]!
  epnsNotificationCounter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EpnsNotificationCounter
  epnsNotificationCounters(
    skip: Int = 0
    first: Int = 100
    orderBy: EpnsNotificationCounter_orderBy
    orderDirection: OrderDirection
    where: EpnsNotificationCounter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EpnsNotificationCounter!]!
  epnsPushNotification(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EpnsPushNotification
  epnsPushNotifications(
    skip: Int = 0
    first: Int = 100
    orderBy: EpnsPushNotification_orderBy
    orderDirection: OrderDirection
    where: EpnsPushNotification_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EpnsPushNotification!]!
  nft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFT
  nfts(
    skip: Int = 0
    first: Int = 100
    orderBy: NFT_orderBy
    orderDirection: OrderDirection
    where: NFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFT!]!
  event(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  delegateChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DelegateChange
  delegateChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: DelegateChange_orderBy
    orderDirection: OrderDirection
    where: DelegateChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DelegateChange!]!
  delegateVotingPowerChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DelegateVotingPowerChange
  delegateVotingPowerChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: DelegateVotingPowerChange_orderBy
    orderDirection: OrderDirection
    where: DelegateVotingPowerChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DelegateVotingPowerChange!]!
  governance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Governance
  governances(
    skip: Int = 0
    first: Int = 100
    orderBy: Governance_orderBy
    orderDirection: OrderDirection
    where: Governance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Governance!]!
  governanceFramework(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GovernanceFramework
  governanceFrameworks(
    skip: Int = 0
    first: Int = 100
    orderBy: GovernanceFramework_orderBy
    orderDirection: OrderDirection
    where: GovernanceFramework_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GovernanceFramework!]!
  proposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proposal
  proposals(
    skip: Int = 0
    first: Int = 100
    orderBy: Proposal_orderBy
    orderDirection: OrderDirection
    where: Proposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proposal!]!
  vote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  tokenHolder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenHolder
  tokenHolders(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenHolder_orderBy
    orderDirection: OrderDirection
    where: TokenHolder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenHolder!]!
  delegate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Delegate
  delegates(
    skip: Int = 0
    first: Int = 100
    orderBy: Delegate_orderBy
    orderDirection: OrderDirection
    where: Delegate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Delegate!]!
  tokenDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDailySnapshot
  tokenDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDailySnapshot!]!
  voteDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VoteDailySnapshot
  voteDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: VoteDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: VoteDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VoteDailySnapshot!]!
}

type Account {
  """Ethereum Address"""
  id: Bytes!
  """All Punks owned by Account"""
  punksOwned(skip: Int = 0, first: Int = 100, orderBy: Punk_orderBy, orderDirection: OrderDirection, where: Punk_filter): [Punk!]
  """Purchases by Account"""
  bought(skip: Int = 0, first: Int = 100, orderBy: Sale_orderBy, orderDirection: OrderDirection, where: Sale_filter): [Sale!]!
  """All Punks owned by Account"""
  nftsOwned(skip: Int = 0, first: Int = 100, orderBy: NFT_orderBy, orderDirection: OrderDirection, where: NFT_filter): [NFT!]!
  """Punks assigned to account (if any)"""
  assigned(skip: Int = 0, first: Int = 100, orderBy: Assign_orderBy, orderDirection: OrderDirection, where: Assign_filter): [Assign!]!
  """Punk transfers by Account"""
  sent(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]!
  """Punk transfers to Account"""
  received(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]!
  """Query bids by Account"""
  bids(skip: Int = 0, first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, where: Bid_filter): [Bid!]!
  """Punks offered for sale by Account"""
  asks(skip: Int = 0, first: Int = 100, orderBy: Ask_orderBy, orderDirection: OrderDirection, where: Ask_filter): [Ask!]!
  """Total number of Punks owned by account"""
  numberOfPunksOwned: BigInt!
  """Total number of Punks assigned to account"""
  numberOfPunksAssigned: BigInt!
  """Total number of transfer by Account"""
  numberOfTransfers: BigInt!
  """Total number of sales by Account"""
  numberOfSales: BigInt!
  """Total number of purchases by Account"""
  numberOfPurchases: BigInt!
  """Total amount spent buying Punks by Account"""
  totalSpent: BigInt!
  """Total amount earned by Account from selling Punks"""
  totalEarned: BigInt!
  """Average amount spent buying Punks by Account"""
  averageAmountSpent: BigInt!
  """Account URL"""
  accountUrl: String!
}

input Account_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  punksOwned_: Punk_filter
  bought_: Sale_filter
  nftsOwned_: NFT_filter
  assigned_: Assign_filter
  sent_: Transfer_filter
  received_: Transfer_filter
  bids_: Bid_filter
  asks_: Ask_filter
  numberOfPunksOwned: BigInt
  numberOfPunksOwned_not: BigInt
  numberOfPunksOwned_gt: BigInt
  numberOfPunksOwned_lt: BigInt
  numberOfPunksOwned_gte: BigInt
  numberOfPunksOwned_lte: BigInt
  numberOfPunksOwned_in: [BigInt!]
  numberOfPunksOwned_not_in: [BigInt!]
  numberOfPunksAssigned: BigInt
  numberOfPunksAssigned_not: BigInt
  numberOfPunksAssigned_gt: BigInt
  numberOfPunksAssigned_lt: BigInt
  numberOfPunksAssigned_gte: BigInt
  numberOfPunksAssigned_lte: BigInt
  numberOfPunksAssigned_in: [BigInt!]
  numberOfPunksAssigned_not_in: [BigInt!]
  numberOfTransfers: BigInt
  numberOfTransfers_not: BigInt
  numberOfTransfers_gt: BigInt
  numberOfTransfers_lt: BigInt
  numberOfTransfers_gte: BigInt
  numberOfTransfers_lte: BigInt
  numberOfTransfers_in: [BigInt!]
  numberOfTransfers_not_in: [BigInt!]
  numberOfSales: BigInt
  numberOfSales_not: BigInt
  numberOfSales_gt: BigInt
  numberOfSales_lt: BigInt
  numberOfSales_gte: BigInt
  numberOfSales_lte: BigInt
  numberOfSales_in: [BigInt!]
  numberOfSales_not_in: [BigInt!]
  numberOfPurchases: BigInt
  numberOfPurchases_not: BigInt
  numberOfPurchases_gt: BigInt
  numberOfPurchases_lt: BigInt
  numberOfPurchases_gte: BigInt
  numberOfPurchases_lte: BigInt
  numberOfPurchases_in: [BigInt!]
  numberOfPurchases_not_in: [BigInt!]
  totalSpent: BigInt
  totalSpent_not: BigInt
  totalSpent_gt: BigInt
  totalSpent_lt: BigInt
  totalSpent_gte: BigInt
  totalSpent_lte: BigInt
  totalSpent_in: [BigInt!]
  totalSpent_not_in: [BigInt!]
  totalEarned: BigInt
  totalEarned_not: BigInt
  totalEarned_gt: BigInt
  totalEarned_lt: BigInt
  totalEarned_gte: BigInt
  totalEarned_lte: BigInt
  totalEarned_in: [BigInt!]
  totalEarned_not_in: [BigInt!]
  averageAmountSpent: BigInt
  averageAmountSpent_not: BigInt
  averageAmountSpent_gt: BigInt
  averageAmountSpent_lt: BigInt
  averageAmountSpent_gte: BigInt
  averageAmountSpent_lte: BigInt
  averageAmountSpent_in: [BigInt!]
  averageAmountSpent_not_in: [BigInt!]
  accountUrl: String
  accountUrl_not: String
  accountUrl_gt: String
  accountUrl_lt: String
  accountUrl_gte: String
  accountUrl_lte: String
  accountUrl_in: [String!]
  accountUrl_not_in: [String!]
  accountUrl_contains: String
  accountUrl_contains_nocase: String
  accountUrl_not_contains: String
  accountUrl_not_contains_nocase: String
  accountUrl_starts_with: String
  accountUrl_starts_with_nocase: String
  accountUrl_not_starts_with: String
  accountUrl_not_starts_with_nocase: String
  accountUrl_ends_with: String
  accountUrl_ends_with_nocase: String
  accountUrl_not_ends_with: String
  accountUrl_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  punksOwned
  bought
  nftsOwned
  assigned
  sent
  received
  bids
  asks
  numberOfPunksOwned
  numberOfPunksAssigned
  numberOfTransfers
  numberOfSales
  numberOfPurchases
  totalSpent
  totalEarned
  averageAmountSpent
  accountUrl
}

type Ask implements Offer {
  id: ID!
  """Account that created Ask"""
  from: Account!
  """Open Status of Punk. Asks can be either Open or Closed"""
  open: Boolean!
  """Ask for Punk in ETH"""
  amount: BigInt!
  """Punk being offered for sale"""
  nft: NFT
  """Ask created at"""
  created: Event
  """Ask removed at"""
  removed: Event
  offerType: OfferType!
}

type AskCreated implements Event {
  id: ID!
  """Account that created Ask"""
  from: Account
  to: Account
  ask: Ask
  """Ask in ETH"""
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being offered for sale"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input AskCreated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  ask: String
  ask_not: String
  ask_gt: String
  ask_lt: String
  ask_gte: String
  ask_lte: String
  ask_in: [String!]
  ask_not_in: [String!]
  ask_contains: String
  ask_contains_nocase: String
  ask_not_contains: String
  ask_not_contains_nocase: String
  ask_starts_with: String
  ask_starts_with_nocase: String
  ask_not_starts_with: String
  ask_not_starts_with_nocase: String
  ask_ends_with: String
  ask_ends_with_nocase: String
  ask_not_ends_with: String
  ask_not_ends_with_nocase: String
  ask_: Ask_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AskCreated_filter]
  or: [AskCreated_filter]
}

enum AskCreated_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  ask
  ask__id
  ask__open
  ask__amount
  ask__offerType
  amount
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type AskRemoved implements Event {
  id: ID!
  ask: Ask!
  """Account that removed Ask"""
  from: Account
  to: Account
  """Ask that was removed, in ETH"""
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk whose asked was removed"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input AskRemoved_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ask: String
  ask_not: String
  ask_gt: String
  ask_lt: String
  ask_gte: String
  ask_lte: String
  ask_in: [String!]
  ask_not_in: [String!]
  ask_contains: String
  ask_contains_nocase: String
  ask_not_contains: String
  ask_not_contains_nocase: String
  ask_starts_with: String
  ask_starts_with_nocase: String
  ask_not_starts_with: String
  ask_not_starts_with_nocase: String
  ask_ends_with: String
  ask_ends_with_nocase: String
  ask_not_ends_with: String
  ask_not_ends_with_nocase: String
  ask_: Ask_filter
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AskRemoved_filter]
  or: [AskRemoved_filter]
}

enum AskRemoved_orderBy {
  id
  ask
  ask__id
  ask__open
  ask__amount
  ask__offerType
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  amount
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

input Ask_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  open: Boolean
  open_not: Boolean
  open_in: [Boolean!]
  open_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  created: String
  created_not: String
  created_gt: String
  created_lt: String
  created_gte: String
  created_lte: String
  created_in: [String!]
  created_not_in: [String!]
  created_contains: String
  created_contains_nocase: String
  created_not_contains: String
  created_not_contains_nocase: String
  created_starts_with: String
  created_starts_with_nocase: String
  created_not_starts_with: String
  created_not_starts_with_nocase: String
  created_ends_with: String
  created_ends_with_nocase: String
  created_not_ends_with: String
  created_not_ends_with_nocase: String
  created_: Event_filter
  removed: String
  removed_not: String
  removed_gt: String
  removed_lt: String
  removed_gte: String
  removed_lte: String
  removed_in: [String!]
  removed_not_in: [String!]
  removed_contains: String
  removed_contains_nocase: String
  removed_not_contains: String
  removed_not_contains_nocase: String
  removed_starts_with: String
  removed_starts_with_nocase: String
  removed_not_starts_with: String
  removed_not_starts_with_nocase: String
  removed_ends_with: String
  removed_ends_with_nocase: String
  removed_not_ends_with: String
  removed_not_ends_with_nocase: String
  removed_: Event_filter
  offerType: OfferType
  offerType_not: OfferType
  offerType_in: [OfferType!]
  offerType_not_in: [OfferType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Ask_filter]
  or: [Ask_filter]
}

enum Ask_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  open
  amount
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  created
  created__id
  created__amount
  created__type
  created__logNumber
  created__blockNumber
  created__blockHash
  created__txHash
  created__timestamp
  removed
  removed__id
  removed__amount
  removed__type
  removed__logNumber
  removed__blockNumber
  removed__blockHash
  removed__txHash
  removed__timestamp
  offerType
}

type Assign implements Event {
  id: ID!
  """Contract metadata"""
  contract: Contract
  """Punk that was assigned"""
  nft: NFT
  """Account that claimed Punk"""
  to: Account
  amount: BigInt
  from: Account
  type: EventType!
  logNumber: BigInt!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Assign_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Assign_filter]
  or: [Assign_filter]
}

enum Assign_orderBy {
  id
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  amount
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  type
  logNumber
  blockNumber
  blockHash
  txHash
  timestamp
}

type Bid implements Offer {
  id: ID!
  """Bidder"""
  from: Account!
  """Open status of Punk. Bids can be either Open or Closed"""
  open: Boolean!
  """Bid amount in ETH"""
  amount: BigInt!
  """Punk bidded"""
  nft: NFT
  """Bid created at"""
  created: Event
  """Bid removed at"""
  removed: Event
  offerType: OfferType!
}

type BidCreated implements Event {
  id: ID!
  """Account that created Bid"""
  from: Account
  to: Account
  bid: Bid
  """Bid in ETH"""
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being bidded"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input BidCreated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  bid: String
  bid_not: String
  bid_gt: String
  bid_lt: String
  bid_gte: String
  bid_lte: String
  bid_in: [String!]
  bid_not_in: [String!]
  bid_contains: String
  bid_contains_nocase: String
  bid_not_contains: String
  bid_not_contains_nocase: String
  bid_starts_with: String
  bid_starts_with_nocase: String
  bid_not_starts_with: String
  bid_not_starts_with_nocase: String
  bid_ends_with: String
  bid_ends_with_nocase: String
  bid_not_ends_with: String
  bid_not_ends_with_nocase: String
  bid_: Bid_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BidCreated_filter]
  or: [BidCreated_filter]
}

enum BidCreated_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  bid
  bid__id
  bid__open
  bid__amount
  bid__offerType
  amount
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type BidRemoved implements Event {
  id: ID!
  """Account that removed Bid"""
  from: Account
  to: Account
  """Bid that was removed, in ETH"""
  amount: BigInt
  bid: Bid!
  """Contract metadata"""
  contract: Contract
  """Punk whose Bid was removed"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input BidRemoved_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  bid: String
  bid_not: String
  bid_gt: String
  bid_lt: String
  bid_gte: String
  bid_lte: String
  bid_in: [String!]
  bid_not_in: [String!]
  bid_contains: String
  bid_contains_nocase: String
  bid_not_contains: String
  bid_not_contains_nocase: String
  bid_starts_with: String
  bid_starts_with_nocase: String
  bid_not_starts_with: String
  bid_not_starts_with_nocase: String
  bid_ends_with: String
  bid_ends_with_nocase: String
  bid_not_ends_with: String
  bid_not_ends_with_nocase: String
  bid_: Bid_filter
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BidRemoved_filter]
  or: [BidRemoved_filter]
}

enum BidRemoved_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  amount
  bid
  bid__id
  bid__open
  bid__amount
  bid__offerType
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

input Bid_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  open: Boolean
  open_not: Boolean
  open_in: [Boolean!]
  open_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  created: String
  created_not: String
  created_gt: String
  created_lt: String
  created_gte: String
  created_lte: String
  created_in: [String!]
  created_not_in: [String!]
  created_contains: String
  created_contains_nocase: String
  created_not_contains: String
  created_not_contains_nocase: String
  created_starts_with: String
  created_starts_with_nocase: String
  created_not_starts_with: String
  created_not_starts_with_nocase: String
  created_ends_with: String
  created_ends_with_nocase: String
  created_not_ends_with: String
  created_not_ends_with_nocase: String
  created_: Event_filter
  removed: String
  removed_not: String
  removed_gt: String
  removed_lt: String
  removed_gte: String
  removed_lte: String
  removed_in: [String!]
  removed_not_in: [String!]
  removed_contains: String
  removed_contains_nocase: String
  removed_not_contains: String
  removed_not_contains_nocase: String
  removed_starts_with: String
  removed_starts_with_nocase: String
  removed_not_starts_with: String
  removed_not_starts_with_nocase: String
  removed_ends_with: String
  removed_ends_with_nocase: String
  removed_not_ends_with: String
  removed_not_ends_with_nocase: String
  removed_: Event_filter
  offerType: OfferType
  offerType_not: OfferType
  offerType_in: [OfferType!]
  offerType_not_in: [OfferType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bid_filter]
  or: [Bid_filter]
}

enum Bid_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  open
  amount
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  created
  created__id
  created__amount
  created__type
  created__logNumber
  created__blockNumber
  created__blockHash
  created__txHash
  created__timestamp
  removed
  removed__id
  removed__amount
  removed__type
  removed__logNumber
  removed__blockNumber
  removed__blockHash
  removed__txHash
  removed__timestamp
  offerType
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type CToken {
  """TxHash + logNumber"""
  id: ID!
  """Sender"""
  from: Account!
  """Recepient"""
  to: Account!
  """New owner of Punk"""
  owner: String!
  """Amount of cToken transferred"""
  amount: BigInt
  punkId: String
  """Field for storing referenceIDs of other events in the same transaction"""
  referenceId: String!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input CToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  punkId: String
  punkId_not: String
  punkId_gt: String
  punkId_lt: String
  punkId_gte: String
  punkId_lte: String
  punkId_in: [String!]
  punkId_not_in: [String!]
  punkId_contains: String
  punkId_contains_nocase: String
  punkId_not_contains: String
  punkId_not_contains_nocase: String
  punkId_starts_with: String
  punkId_starts_with_nocase: String
  punkId_not_starts_with: String
  punkId_not_starts_with_nocase: String
  punkId_ends_with: String
  punkId_ends_with_nocase: String
  punkId_not_ends_with: String
  punkId_not_ends_with_nocase: String
  referenceId: String
  referenceId_not: String
  referenceId_gt: String
  referenceId_lt: String
  referenceId_gte: String
  referenceId_lte: String
  referenceId_in: [String!]
  referenceId_not_in: [String!]
  referenceId_contains: String
  referenceId_contains_nocase: String
  referenceId_not_contains: String
  referenceId_not_contains_nocase: String
  referenceId_starts_with: String
  referenceId_starts_with_nocase: String
  referenceId_not_starts_with: String
  referenceId_not_starts_with_nocase: String
  referenceId_ends_with: String
  referenceId_ends_with_nocase: String
  referenceId_not_ends_with: String
  referenceId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CToken_filter]
  or: [CToken_filter]
}

enum CToken_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  owner
  amount
  punkId
  referenceId
  blockNumber
  blockHash
  txHash
  timestamp
}

type Contract {
  """Contract Address"""
  id: ID!
  """Token Symbol"""
  symbol: String
  """Token name"""
  name: String
  """Total supply of tokens"""
  totalSupply: BigInt!
  """Total number of Punk sales"""
  totalSales: BigInt!
  """Total Sales in ETH for Punks"""
  totalAmountTraded: BigInt!
  """The hash of the composite image of all the Punks"""
  imageHash: String
}

input Contract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  totalSales: BigInt
  totalSales_not: BigInt
  totalSales_gt: BigInt
  totalSales_lt: BigInt
  totalSales_gte: BigInt
  totalSales_lte: BigInt
  totalSales_in: [BigInt!]
  totalSales_not_in: [BigInt!]
  totalAmountTraded: BigInt
  totalAmountTraded_not: BigInt
  totalAmountTraded_gt: BigInt
  totalAmountTraded_lt: BigInt
  totalAmountTraded_gte: BigInt
  totalAmountTraded_lte: BigInt
  totalAmountTraded_in: [BigInt!]
  totalAmountTraded_not_in: [BigInt!]
  imageHash: String
  imageHash_not: String
  imageHash_gt: String
  imageHash_lt: String
  imageHash_gte: String
  imageHash_lte: String
  imageHash_in: [String!]
  imageHash_not_in: [String!]
  imageHash_contains: String
  imageHash_contains_nocase: String
  imageHash_not_contains: String
  imageHash_not_contains_nocase: String
  imageHash_starts_with: String
  imageHash_starts_with_nocase: String
  imageHash_not_starts_with: String
  imageHash_not_starts_with_nocase: String
  imageHash_ends_with: String
  imageHash_ends_with_nocase: String
  imageHash_not_ends_with: String
  imageHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Contract_filter]
  or: [Contract_filter]
}

enum Contract_orderBy {
  id
  symbol
  name
  totalSupply
  totalSales
  totalAmountTraded
  imageHash
}

type EpnsNotificationCounter {
  id: ID!
  totalCount: BigInt!
}

input EpnsNotificationCounter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalCount: BigInt
  totalCount_not: BigInt
  totalCount_gt: BigInt
  totalCount_lt: BigInt
  totalCount_gte: BigInt
  totalCount_lte: BigInt
  totalCount_in: [BigInt!]
  totalCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EpnsNotificationCounter_filter]
  or: [EpnsNotificationCounter_filter]
}

enum EpnsNotificationCounter_orderBy {
  id
  totalCount
}

type EpnsPushNotification {
  id: ID!
  notificationNumber: BigInt!
  recipient: String!
  notification: String!
}

input EpnsPushNotification_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  notificationNumber: BigInt
  notificationNumber_not: BigInt
  notificationNumber_gt: BigInt
  notificationNumber_lt: BigInt
  notificationNumber_gte: BigInt
  notificationNumber_lte: BigInt
  notificationNumber_in: [BigInt!]
  notificationNumber_not_in: [BigInt!]
  recipient: String
  recipient_not: String
  recipient_gt: String
  recipient_lt: String
  recipient_gte: String
  recipient_lte: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_contains: String
  recipient_contains_nocase: String
  recipient_not_contains: String
  recipient_not_contains_nocase: String
  recipient_starts_with: String
  recipient_starts_with_nocase: String
  recipient_not_starts_with: String
  recipient_not_starts_with_nocase: String
  recipient_ends_with: String
  recipient_ends_with_nocase: String
  recipient_not_ends_with: String
  recipient_not_ends_with_nocase: String
  notification: String
  notification_not: String
  notification_gt: String
  notification_lt: String
  notification_gte: String
  notification_lte: String
  notification_in: [String!]
  notification_not_in: [String!]
  notification_contains: String
  notification_contains_nocase: String
  notification_not_contains: String
  notification_not_contains_nocase: String
  notification_starts_with: String
  notification_starts_with_nocase: String
  notification_not_starts_with: String
  notification_not_starts_with_nocase: String
  notification_ends_with: String
  notification_ends_with_nocase: String
  notification_not_ends_with: String
  notification_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EpnsPushNotification_filter]
  or: [EpnsPushNotification_filter]
}

enum EpnsPushNotification_orderBy {
  id
  notificationNumber
  recipient
  notification
}

interface Event {
  id: ID!
  """Contract metadata"""
  contract: Contract
  from: Account
  to: Account
  amount: BigInt
  """Punk"""
  nft: NFT
  type: EventType!
  logNumber: BigInt!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

enum EventType {
  ASSIGN
  TRANSFER
  ASK_CREATED
  ASK_REMOVED
  BID_CREATED
  BID_REMOVED
  SALE
  WRAP
  UNWRAP
}

input Event_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Event_filter]
  or: [Event_filter]
}

enum Event_orderBy {
  id
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  amount
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  type
  logNumber
  blockNumber
  blockHash
  txHash
  timestamp
}

"""
8 bytes signed integer

"""
scalar Int8

type MetaData {
  id: ID!
  tokenId: BigInt!
  """URI of Punk"""
  tokenURI: String!
  """Punk image"""
  image: String
  """Punk Svg image"""
  svg: String
  """Contract URI"""
  contractURI: String!
  """Punk"""
  punk: Punk!
  """Punk Traits"""
  traits(skip: Int = 0, first: Int = 100, orderBy: Trait_orderBy, orderDirection: OrderDirection, where: Trait_filter): [Trait!]!
}

input MetaData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  tokenURI: String
  tokenURI_not: String
  tokenURI_gt: String
  tokenURI_lt: String
  tokenURI_gte: String
  tokenURI_lte: String
  tokenURI_in: [String!]
  tokenURI_not_in: [String!]
  tokenURI_contains: String
  tokenURI_contains_nocase: String
  tokenURI_not_contains: String
  tokenURI_not_contains_nocase: String
  tokenURI_starts_with: String
  tokenURI_starts_with_nocase: String
  tokenURI_not_starts_with: String
  tokenURI_not_starts_with_nocase: String
  tokenURI_ends_with: String
  tokenURI_ends_with_nocase: String
  tokenURI_not_ends_with: String
  tokenURI_not_ends_with_nocase: String
  image: String
  image_not: String
  image_gt: String
  image_lt: String
  image_gte: String
  image_lte: String
  image_in: [String!]
  image_not_in: [String!]
  image_contains: String
  image_contains_nocase: String
  image_not_contains: String
  image_not_contains_nocase: String
  image_starts_with: String
  image_starts_with_nocase: String
  image_not_starts_with: String
  image_not_starts_with_nocase: String
  image_ends_with: String
  image_ends_with_nocase: String
  image_not_ends_with: String
  image_not_ends_with_nocase: String
  svg: String
  svg_not: String
  svg_gt: String
  svg_lt: String
  svg_gte: String
  svg_lte: String
  svg_in: [String!]
  svg_not_in: [String!]
  svg_contains: String
  svg_contains_nocase: String
  svg_not_contains: String
  svg_not_contains_nocase: String
  svg_starts_with: String
  svg_starts_with_nocase: String
  svg_not_starts_with: String
  svg_not_starts_with_nocase: String
  svg_ends_with: String
  svg_ends_with_nocase: String
  svg_not_ends_with: String
  svg_not_ends_with_nocase: String
  contractURI: String
  contractURI_not: String
  contractURI_gt: String
  contractURI_lt: String
  contractURI_gte: String
  contractURI_lte: String
  contractURI_in: [String!]
  contractURI_not_in: [String!]
  contractURI_contains: String
  contractURI_contains_nocase: String
  contractURI_not_contains: String
  contractURI_not_contains_nocase: String
  contractURI_starts_with: String
  contractURI_starts_with_nocase: String
  contractURI_not_starts_with: String
  contractURI_not_starts_with_nocase: String
  contractURI_ends_with: String
  contractURI_ends_with_nocase: String
  contractURI_not_ends_with: String
  contractURI_not_ends_with_nocase: String
  punk: String
  punk_not: String
  punk_gt: String
  punk_lt: String
  punk_gte: String
  punk_lte: String
  punk_in: [String!]
  punk_not_in: [String!]
  punk_contains: String
  punk_contains_nocase: String
  punk_not_contains: String
  punk_not_contains_nocase: String
  punk_starts_with: String
  punk_starts_with_nocase: String
  punk_not_starts_with: String
  punk_not_starts_with_nocase: String
  punk_ends_with: String
  punk_ends_with_nocase: String
  punk_not_ends_with: String
  punk_not_ends_with_nocase: String
  punk_: Punk_filter
  traits: [String!]
  traits_not: [String!]
  traits_contains: [String!]
  traits_contains_nocase: [String!]
  traits_not_contains: [String!]
  traits_not_contains_nocase: [String!]
  traits_: Trait_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MetaData_filter]
  or: [MetaData_filter]
}

enum MetaData_orderBy {
  id
  tokenId
  tokenURI
  image
  svg
  contractURI
  punk
  punk__id
  punk__tokenId
  punk__wrapped
  punk__numberOfTransfers
  punk__numberOfSales
  punk__totalAmountSpentOnPunk
  punk__averageSalePrice
  traits
}

interface NFT {
  id: ID!
  """Contract metadata"""
  contract: Contract
  numberOfTransfers: BigInt!
  numberOfSales: BigInt!
  """Punk index"""
  tokenId: BigInt!
  """Punk owner"""
  owner: Account!
  """All events"""
  events(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]!
  """ID of current ask for Punk"""
  currentAsk: Ask
  """ID of current bid for Punk"""
  currentBid: Bid
}

input NFT_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  numberOfTransfers: BigInt
  numberOfTransfers_not: BigInt
  numberOfTransfers_gt: BigInt
  numberOfTransfers_lt: BigInt
  numberOfTransfers_gte: BigInt
  numberOfTransfers_lte: BigInt
  numberOfTransfers_in: [BigInt!]
  numberOfTransfers_not_in: [BigInt!]
  numberOfSales: BigInt
  numberOfSales_not: BigInt
  numberOfSales_gt: BigInt
  numberOfSales_lt: BigInt
  numberOfSales_gte: BigInt
  numberOfSales_lte: BigInt
  numberOfSales_in: [BigInt!]
  numberOfSales_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  events_: Event_filter
  currentAsk: String
  currentAsk_not: String
  currentAsk_gt: String
  currentAsk_lt: String
  currentAsk_gte: String
  currentAsk_lte: String
  currentAsk_in: [String!]
  currentAsk_not_in: [String!]
  currentAsk_contains: String
  currentAsk_contains_nocase: String
  currentAsk_not_contains: String
  currentAsk_not_contains_nocase: String
  currentAsk_starts_with: String
  currentAsk_starts_with_nocase: String
  currentAsk_not_starts_with: String
  currentAsk_not_starts_with_nocase: String
  currentAsk_ends_with: String
  currentAsk_ends_with_nocase: String
  currentAsk_not_ends_with: String
  currentAsk_not_ends_with_nocase: String
  currentAsk_: Ask_filter
  currentBid: String
  currentBid_not: String
  currentBid_gt: String
  currentBid_lt: String
  currentBid_gte: String
  currentBid_lte: String
  currentBid_in: [String!]
  currentBid_not_in: [String!]
  currentBid_contains: String
  currentBid_contains_nocase: String
  currentBid_not_contains: String
  currentBid_not_contains_nocase: String
  currentBid_starts_with: String
  currentBid_starts_with_nocase: String
  currentBid_not_starts_with: String
  currentBid_not_starts_with_nocase: String
  currentBid_ends_with: String
  currentBid_ends_with_nocase: String
  currentBid_not_ends_with: String
  currentBid_not_ends_with_nocase: String
  currentBid_: Bid_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NFT_filter]
  or: [NFT_filter]
}

enum NFT_orderBy {
  id
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  numberOfTransfers
  numberOfSales
  tokenId
  owner
  owner__id
  owner__numberOfPunksOwned
  owner__numberOfPunksAssigned
  owner__numberOfTransfers
  owner__numberOfSales
  owner__numberOfPurchases
  owner__totalSpent
  owner__totalEarned
  owner__averageAmountSpent
  owner__accountUrl
  events
  currentAsk
  currentAsk__id
  currentAsk__open
  currentAsk__amount
  currentAsk__offerType
  currentBid
  currentBid__id
  currentBid__open
  currentBid__amount
  currentBid__offerType
}

interface Offer {
  id: ID!
  """Punk owner"""
  from: Account!
  """Open Status of Punk. Asks/Bids can be either Open or Closed"""
  open: Boolean!
  """Bid/Ask for Punk in ETH"""
  amount: BigInt!
  """Punk being offered/bidded"""
  nft: NFT
  """Created at. Could be ASK or BID"""
  created: Event
  """Removed at. Could be ASK or BID"""
  removed: Event
  offerType: OfferType!
}

enum OfferType {
  BID
  ASK
}

input Offer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  open: Boolean
  open_not: Boolean
  open_in: [Boolean!]
  open_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  created: String
  created_not: String
  created_gt: String
  created_lt: String
  created_gte: String
  created_lte: String
  created_in: [String!]
  created_not_in: [String!]
  created_contains: String
  created_contains_nocase: String
  created_not_contains: String
  created_not_contains_nocase: String
  created_starts_with: String
  created_starts_with_nocase: String
  created_not_starts_with: String
  created_not_starts_with_nocase: String
  created_ends_with: String
  created_ends_with_nocase: String
  created_not_ends_with: String
  created_not_ends_with_nocase: String
  created_: Event_filter
  removed: String
  removed_not: String
  removed_gt: String
  removed_lt: String
  removed_gte: String
  removed_lte: String
  removed_in: [String!]
  removed_not_in: [String!]
  removed_contains: String
  removed_contains_nocase: String
  removed_not_contains: String
  removed_not_contains_nocase: String
  removed_starts_with: String
  removed_starts_with_nocase: String
  removed_not_starts_with: String
  removed_not_starts_with_nocase: String
  removed_ends_with: String
  removed_ends_with_nocase: String
  removed_not_ends_with: String
  removed_not_ends_with_nocase: String
  removed_: Event_filter
  offerType: OfferType
  offerType_not: OfferType
  offerType_in: [OfferType!]
  offerType_not_in: [OfferType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Offer_filter]
  or: [Offer_filter]
}

enum Offer_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  open
  amount
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  created
  created__id
  created__amount
  created__type
  created__logNumber
  created__blockNumber
  created__blockHash
  created__txHash
  created__timestamp
  removed
  removed__id
  removed__amount
  removed__type
  removed__logNumber
  removed__blockNumber
  removed__blockHash
  removed__txHash
  removed__timestamp
  offerType
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Punk implements NFT {
  """Punk ID"""
  id: ID!
  """Account that received Punk"""
  transferedTo: Account
  """Account that claimed Punk"""
  assignedTo: Account
  """Punk buyers"""
  purchasedBy: Account
  """Punk metadata"""
  metadata: MetaData
  """Contract data"""
  contract: Contract
  """Punk tokenId"""
  tokenId: BigInt!
  """Current owner of Punk"""
  owner: Account!
  """Wrap Status"""
  wrapped: Boolean!
  """All Punk events"""
  events(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]!
  """Current Ask for Punk"""
  currentAsk: Ask
  """Current Bid for Punk"""
  currentBid: Bid
  """Current AskCreated event"""
  currentAskCreated: AskCreated
  """Current BidCreated event"""
  currentBidCreated: BidCreated
  """Number of times Punk has been transferred"""
  numberOfTransfers: BigInt!
  """Number of times Punk was sold"""
  numberOfSales: BigInt!
  """Current AskRemoved event"""
  currentAskRemoved: AskRemoved
  """Current BidRemoved event"""
  currentBidRemoved: BidRemoved
  """
  Total amount spent purchasing Punk across OpenSea & Rarible marketplaces
  """
  totalAmountSpentOnPunk: BigInt!
  """Average price for Punk across OpenSea & Rarible marketplaces"""
  averageSalePrice: BigInt!
}

input Punk_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferedTo: String
  transferedTo_not: String
  transferedTo_gt: String
  transferedTo_lt: String
  transferedTo_gte: String
  transferedTo_lte: String
  transferedTo_in: [String!]
  transferedTo_not_in: [String!]
  transferedTo_contains: String
  transferedTo_contains_nocase: String
  transferedTo_not_contains: String
  transferedTo_not_contains_nocase: String
  transferedTo_starts_with: String
  transferedTo_starts_with_nocase: String
  transferedTo_not_starts_with: String
  transferedTo_not_starts_with_nocase: String
  transferedTo_ends_with: String
  transferedTo_ends_with_nocase: String
  transferedTo_not_ends_with: String
  transferedTo_not_ends_with_nocase: String
  transferedTo_: Account_filter
  assignedTo: String
  assignedTo_not: String
  assignedTo_gt: String
  assignedTo_lt: String
  assignedTo_gte: String
  assignedTo_lte: String
  assignedTo_in: [String!]
  assignedTo_not_in: [String!]
  assignedTo_contains: String
  assignedTo_contains_nocase: String
  assignedTo_not_contains: String
  assignedTo_not_contains_nocase: String
  assignedTo_starts_with: String
  assignedTo_starts_with_nocase: String
  assignedTo_not_starts_with: String
  assignedTo_not_starts_with_nocase: String
  assignedTo_ends_with: String
  assignedTo_ends_with_nocase: String
  assignedTo_not_ends_with: String
  assignedTo_not_ends_with_nocase: String
  assignedTo_: Account_filter
  purchasedBy: String
  purchasedBy_not: String
  purchasedBy_gt: String
  purchasedBy_lt: String
  purchasedBy_gte: String
  purchasedBy_lte: String
  purchasedBy_in: [String!]
  purchasedBy_not_in: [String!]
  purchasedBy_contains: String
  purchasedBy_contains_nocase: String
  purchasedBy_not_contains: String
  purchasedBy_not_contains_nocase: String
  purchasedBy_starts_with: String
  purchasedBy_starts_with_nocase: String
  purchasedBy_not_starts_with: String
  purchasedBy_not_starts_with_nocase: String
  purchasedBy_ends_with: String
  purchasedBy_ends_with_nocase: String
  purchasedBy_not_ends_with: String
  purchasedBy_not_ends_with_nocase: String
  purchasedBy_: Account_filter
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_: MetaData_filter
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  wrapped: Boolean
  wrapped_not: Boolean
  wrapped_in: [Boolean!]
  wrapped_not_in: [Boolean!]
  events_: Event_filter
  currentAsk: String
  currentAsk_not: String
  currentAsk_gt: String
  currentAsk_lt: String
  currentAsk_gte: String
  currentAsk_lte: String
  currentAsk_in: [String!]
  currentAsk_not_in: [String!]
  currentAsk_contains: String
  currentAsk_contains_nocase: String
  currentAsk_not_contains: String
  currentAsk_not_contains_nocase: String
  currentAsk_starts_with: String
  currentAsk_starts_with_nocase: String
  currentAsk_not_starts_with: String
  currentAsk_not_starts_with_nocase: String
  currentAsk_ends_with: String
  currentAsk_ends_with_nocase: String
  currentAsk_not_ends_with: String
  currentAsk_not_ends_with_nocase: String
  currentAsk_: Ask_filter
  currentBid: String
  currentBid_not: String
  currentBid_gt: String
  currentBid_lt: String
  currentBid_gte: String
  currentBid_lte: String
  currentBid_in: [String!]
  currentBid_not_in: [String!]
  currentBid_contains: String
  currentBid_contains_nocase: String
  currentBid_not_contains: String
  currentBid_not_contains_nocase: String
  currentBid_starts_with: String
  currentBid_starts_with_nocase: String
  currentBid_not_starts_with: String
  currentBid_not_starts_with_nocase: String
  currentBid_ends_with: String
  currentBid_ends_with_nocase: String
  currentBid_not_ends_with: String
  currentBid_not_ends_with_nocase: String
  currentBid_: Bid_filter
  currentAskCreated: String
  currentAskCreated_not: String
  currentAskCreated_gt: String
  currentAskCreated_lt: String
  currentAskCreated_gte: String
  currentAskCreated_lte: String
  currentAskCreated_in: [String!]
  currentAskCreated_not_in: [String!]
  currentAskCreated_contains: String
  currentAskCreated_contains_nocase: String
  currentAskCreated_not_contains: String
  currentAskCreated_not_contains_nocase: String
  currentAskCreated_starts_with: String
  currentAskCreated_starts_with_nocase: String
  currentAskCreated_not_starts_with: String
  currentAskCreated_not_starts_with_nocase: String
  currentAskCreated_ends_with: String
  currentAskCreated_ends_with_nocase: String
  currentAskCreated_not_ends_with: String
  currentAskCreated_not_ends_with_nocase: String
  currentAskCreated_: AskCreated_filter
  currentBidCreated: String
  currentBidCreated_not: String
  currentBidCreated_gt: String
  currentBidCreated_lt: String
  currentBidCreated_gte: String
  currentBidCreated_lte: String
  currentBidCreated_in: [String!]
  currentBidCreated_not_in: [String!]
  currentBidCreated_contains: String
  currentBidCreated_contains_nocase: String
  currentBidCreated_not_contains: String
  currentBidCreated_not_contains_nocase: String
  currentBidCreated_starts_with: String
  currentBidCreated_starts_with_nocase: String
  currentBidCreated_not_starts_with: String
  currentBidCreated_not_starts_with_nocase: String
  currentBidCreated_ends_with: String
  currentBidCreated_ends_with_nocase: String
  currentBidCreated_not_ends_with: String
  currentBidCreated_not_ends_with_nocase: String
  currentBidCreated_: BidCreated_filter
  numberOfTransfers: BigInt
  numberOfTransfers_not: BigInt
  numberOfTransfers_gt: BigInt
  numberOfTransfers_lt: BigInt
  numberOfTransfers_gte: BigInt
  numberOfTransfers_lte: BigInt
  numberOfTransfers_in: [BigInt!]
  numberOfTransfers_not_in: [BigInt!]
  numberOfSales: BigInt
  numberOfSales_not: BigInt
  numberOfSales_gt: BigInt
  numberOfSales_lt: BigInt
  numberOfSales_gte: BigInt
  numberOfSales_lte: BigInt
  numberOfSales_in: [BigInt!]
  numberOfSales_not_in: [BigInt!]
  currentAskRemoved: String
  currentAskRemoved_not: String
  currentAskRemoved_gt: String
  currentAskRemoved_lt: String
  currentAskRemoved_gte: String
  currentAskRemoved_lte: String
  currentAskRemoved_in: [String!]
  currentAskRemoved_not_in: [String!]
  currentAskRemoved_contains: String
  currentAskRemoved_contains_nocase: String
  currentAskRemoved_not_contains: String
  currentAskRemoved_not_contains_nocase: String
  currentAskRemoved_starts_with: String
  currentAskRemoved_starts_with_nocase: String
  currentAskRemoved_not_starts_with: String
  currentAskRemoved_not_starts_with_nocase: String
  currentAskRemoved_ends_with: String
  currentAskRemoved_ends_with_nocase: String
  currentAskRemoved_not_ends_with: String
  currentAskRemoved_not_ends_with_nocase: String
  currentAskRemoved_: AskRemoved_filter
  currentBidRemoved: String
  currentBidRemoved_not: String
  currentBidRemoved_gt: String
  currentBidRemoved_lt: String
  currentBidRemoved_gte: String
  currentBidRemoved_lte: String
  currentBidRemoved_in: [String!]
  currentBidRemoved_not_in: [String!]
  currentBidRemoved_contains: String
  currentBidRemoved_contains_nocase: String
  currentBidRemoved_not_contains: String
  currentBidRemoved_not_contains_nocase: String
  currentBidRemoved_starts_with: String
  currentBidRemoved_starts_with_nocase: String
  currentBidRemoved_not_starts_with: String
  currentBidRemoved_not_starts_with_nocase: String
  currentBidRemoved_ends_with: String
  currentBidRemoved_ends_with_nocase: String
  currentBidRemoved_not_ends_with: String
  currentBidRemoved_not_ends_with_nocase: String
  currentBidRemoved_: BidRemoved_filter
  totalAmountSpentOnPunk: BigInt
  totalAmountSpentOnPunk_not: BigInt
  totalAmountSpentOnPunk_gt: BigInt
  totalAmountSpentOnPunk_lt: BigInt
  totalAmountSpentOnPunk_gte: BigInt
  totalAmountSpentOnPunk_lte: BigInt
  totalAmountSpentOnPunk_in: [BigInt!]
  totalAmountSpentOnPunk_not_in: [BigInt!]
  averageSalePrice: BigInt
  averageSalePrice_not: BigInt
  averageSalePrice_gt: BigInt
  averageSalePrice_lt: BigInt
  averageSalePrice_gte: BigInt
  averageSalePrice_lte: BigInt
  averageSalePrice_in: [BigInt!]
  averageSalePrice_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Punk_filter]
  or: [Punk_filter]
}

enum Punk_orderBy {
  id
  transferedTo
  transferedTo__id
  transferedTo__numberOfPunksOwned
  transferedTo__numberOfPunksAssigned
  transferedTo__numberOfTransfers
  transferedTo__numberOfSales
  transferedTo__numberOfPurchases
  transferedTo__totalSpent
  transferedTo__totalEarned
  transferedTo__averageAmountSpent
  transferedTo__accountUrl
  assignedTo
  assignedTo__id
  assignedTo__numberOfPunksOwned
  assignedTo__numberOfPunksAssigned
  assignedTo__numberOfTransfers
  assignedTo__numberOfSales
  assignedTo__numberOfPurchases
  assignedTo__totalSpent
  assignedTo__totalEarned
  assignedTo__averageAmountSpent
  assignedTo__accountUrl
  purchasedBy
  purchasedBy__id
  purchasedBy__numberOfPunksOwned
  purchasedBy__numberOfPunksAssigned
  purchasedBy__numberOfTransfers
  purchasedBy__numberOfSales
  purchasedBy__numberOfPurchases
  purchasedBy__totalSpent
  purchasedBy__totalEarned
  purchasedBy__averageAmountSpent
  purchasedBy__accountUrl
  metadata
  metadata__id
  metadata__tokenId
  metadata__tokenURI
  metadata__image
  metadata__svg
  metadata__contractURI
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  tokenId
  owner
  owner__id
  owner__numberOfPunksOwned
  owner__numberOfPunksAssigned
  owner__numberOfTransfers
  owner__numberOfSales
  owner__numberOfPurchases
  owner__totalSpent
  owner__totalEarned
  owner__averageAmountSpent
  owner__accountUrl
  wrapped
  events
  currentAsk
  currentAsk__id
  currentAsk__open
  currentAsk__amount
  currentAsk__offerType
  currentBid
  currentBid__id
  currentBid__open
  currentBid__amount
  currentBid__offerType
  currentAskCreated
  currentAskCreated__id
  currentAskCreated__amount
  currentAskCreated__logNumber
  currentAskCreated__type
  currentAskCreated__blockNumber
  currentAskCreated__blockHash
  currentAskCreated__txHash
  currentAskCreated__timestamp
  currentBidCreated
  currentBidCreated__id
  currentBidCreated__amount
  currentBidCreated__logNumber
  currentBidCreated__type
  currentBidCreated__blockNumber
  currentBidCreated__blockHash
  currentBidCreated__txHash
  currentBidCreated__timestamp
  numberOfTransfers
  numberOfSales
  currentAskRemoved
  currentAskRemoved__id
  currentAskRemoved__amount
  currentAskRemoved__logNumber
  currentAskRemoved__type
  currentAskRemoved__blockNumber
  currentAskRemoved__blockHash
  currentAskRemoved__txHash
  currentAskRemoved__timestamp
  currentBidRemoved
  currentBidRemoved__id
  currentBidRemoved__amount
  currentBidRemoved__logNumber
  currentBidRemoved__type
  currentBidRemoved__blockNumber
  currentBidRemoved__blockHash
  currentBidRemoved__txHash
  currentBidRemoved__timestamp
  totalAmountSpentOnPunk
  averageSalePrice
}

type Sale implements Event {
  id: ID!
  """Punk buyer"""
  to: Account
  """Amount in ETH"""
  amount: BigInt
  """Punk seller"""
  from: Account
  """Contract metadata"""
  contract: Contract
  """Punk being sold"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Sale_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Sale_filter]
  or: [Sale_filter]
}

enum Sale_orderBy {
  id
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  amount
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type Trait {
  """Trait"""
  id: ID!
  type: TraitType!
  metaDatas(skip: Int = 0, first: Int = 100, orderBy: MetaData_orderBy, orderDirection: OrderDirection, where: MetaData_filter): [MetaData!]!
  """Number of Punks with this trait"""
  numberOfNfts: BigInt!
}

enum TraitType {
  TYPE
  ACCESSORY
}

input Trait_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: TraitType
  type_not: TraitType
  type_in: [TraitType!]
  type_not_in: [TraitType!]
  metaDatas_: MetaData_filter
  numberOfNfts: BigInt
  numberOfNfts_not: BigInt
  numberOfNfts_gt: BigInt
  numberOfNfts_lt: BigInt
  numberOfNfts_gte: BigInt
  numberOfNfts_lte: BigInt
  numberOfNfts_in: [BigInt!]
  numberOfNfts_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Trait_filter]
  or: [Trait_filter]
}

enum Trait_orderBy {
  id
  type
  metaDatas
  numberOfNfts
}

type Transfer implements Event {
  id: ID!
  """Sender"""
  from: Account
  """Receiver"""
  to: Account
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being transferred"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  or: [Transfer_filter]
}

enum Transfer_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  amount
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type Unwrap implements Event {
  id: ID!
  """Account that unwrapped Punk"""
  from: Account
  to: Account
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being unwrapped"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Unwrap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Unwrap_filter]
  or: [Unwrap_filter]
}

enum Unwrap_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  amount
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type UserProxy {
  """Contract Address of UserProxy"""
  id: ID!
  """Account that owns the Proxy"""
  user: Account!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input UserProxy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: Account_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserProxy_filter]
  or: [UserProxy_filter]
}

enum UserProxy_orderBy {
  id
  user
  user__id
  user__numberOfPunksOwned
  user__numberOfPunksAssigned
  user__numberOfTransfers
  user__numberOfSales
  user__numberOfPurchases
  user__totalSpent
  user__totalEarned
  user__averageAmountSpent
  user__accountUrl
  blockNumber
  blockHash
  txHash
  timestamp
}

type Wrap implements Event {
  id: ID!
  """Account that wrapped Punk"""
  from: Account
  to: Account
  amount: BigInt
  """Contract metadata"""
  contract: Contract
  """Punk being wrapped"""
  nft: NFT
  logNumber: BigInt!
  type: EventType!
  """Transaction details"""
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

input Wrap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  logNumber: BigInt
  logNumber_not: BigInt
  logNumber_gt: BigInt
  logNumber_lt: BigInt
  logNumber_gte: BigInt
  logNumber_lte: BigInt
  logNumber_in: [BigInt!]
  logNumber_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockHash: Bytes
  blockHash_not: Bytes
  blockHash_gt: Bytes
  blockHash_lt: Bytes
  blockHash_gte: Bytes
  blockHash_lte: Bytes
  blockHash_in: [Bytes!]
  blockHash_not_in: [Bytes!]
  blockHash_contains: Bytes
  blockHash_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Wrap_filter]
  or: [Wrap_filter]
}

enum Wrap_orderBy {
  id
  from
  from__id
  from__numberOfPunksOwned
  from__numberOfPunksAssigned
  from__numberOfTransfers
  from__numberOfSales
  from__numberOfPurchases
  from__totalSpent
  from__totalEarned
  from__averageAmountSpent
  from__accountUrl
  to
  to__id
  to__numberOfPunksOwned
  to__numberOfPunksAssigned
  to__numberOfTransfers
  to__numberOfSales
  to__numberOfPurchases
  to__totalSpent
  to__totalEarned
  to__averageAmountSpent
  to__accountUrl
  amount
  contract
  contract__id
  contract__symbol
  contract__name
  contract__totalSupply
  contract__totalSales
  contract__totalAmountTraded
  contract__imageHash
  nft
  nft__id
  nft__numberOfTransfers
  nft__numberOfSales
  nft__tokenId
  logNumber
  type
  blockNumber
  blockHash
  txHash
  timestamp
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type Delegate {
  """
  A Delegate is any address that has been delegated with voting tokens by a token holder, id is the blockchain address of said delegate
  """
  id: String!
  """
  Amount of votes delegated to this delegate to be used on proposal votings expressed in the smallest unit of the token
  """
  delegatedVotesRaw: BigInt!
  """
  Amount of votes delegated to this delegate to be used on proposal votings expressed as a BigDecimal normalized value
  """
  delegatedVotes: BigDecimal!
  """Total token holders that this delegate represents"""
  tokenHoldersRepresentedAmount: Int!
  """Token holders that this delegate represents"""
  tokenHoldersRepresented(skip: Int = 0, first: Int = 100, orderBy: TokenHolder_orderBy, orderDirection: OrderDirection, where: TokenHolder_filter): [TokenHolder!]!
  """Votes that a delegate has made in different proposals"""
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]!
  """Number of proposals voted on"""
  numberVotes: Int!
  """Proposals that the delegate has created"""
  proposals(skip: Int = 0, first: Int = 100, orderBy: Proposal_orderBy, orderDirection: OrderDirection, where: Proposal_filter): [Proposal!]!
}

type DelegateChange {
  """Unique entity used to keep track of delegate changes"""
  id: ID!
  """Token addresss"""
  tokenAddress: String
  """Token address for delegator"""
  delegator: String!
  """Token address for delegate"""
  delegate: String!
  """Token address for previous delegate"""
  previousDelegate: String!
  """Block time change happened"""
  blockTimestamp: BigInt!
  """Transaction hash of the delegate change event"""
  txnHash: String!
  """Log index for delegate change"""
  logIndex: BigInt!
  """Block number of event"""
  blockNumber: BigInt!
}

input DelegateChange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegate: String
  delegate_not: String
  delegate_gt: String
  delegate_lt: String
  delegate_gte: String
  delegate_lte: String
  delegate_in: [String!]
  delegate_not_in: [String!]
  delegate_contains: String
  delegate_contains_nocase: String
  delegate_not_contains: String
  delegate_not_contains_nocase: String
  delegate_starts_with: String
  delegate_starts_with_nocase: String
  delegate_not_starts_with: String
  delegate_not_starts_with_nocase: String
  delegate_ends_with: String
  delegate_ends_with_nocase: String
  delegate_not_ends_with: String
  delegate_not_ends_with_nocase: String
  previousDelegate: String
  previousDelegate_not: String
  previousDelegate_gt: String
  previousDelegate_lt: String
  previousDelegate_gte: String
  previousDelegate_lte: String
  previousDelegate_in: [String!]
  previousDelegate_not_in: [String!]
  previousDelegate_contains: String
  previousDelegate_contains_nocase: String
  previousDelegate_not_contains: String
  previousDelegate_not_contains_nocase: String
  previousDelegate_starts_with: String
  previousDelegate_starts_with_nocase: String
  previousDelegate_not_starts_with: String
  previousDelegate_not_starts_with_nocase: String
  previousDelegate_ends_with: String
  previousDelegate_ends_with_nocase: String
  previousDelegate_not_ends_with: String
  previousDelegate_not_ends_with_nocase: String
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  txnHash: String
  txnHash_not: String
  txnHash_gt: String
  txnHash_lt: String
  txnHash_gte: String
  txnHash_lte: String
  txnHash_in: [String!]
  txnHash_not_in: [String!]
  txnHash_contains: String
  txnHash_contains_nocase: String
  txnHash_not_contains: String
  txnHash_not_contains_nocase: String
  txnHash_starts_with: String
  txnHash_starts_with_nocase: String
  txnHash_not_starts_with: String
  txnHash_not_starts_with_nocase: String
  txnHash_ends_with: String
  txnHash_ends_with_nocase: String
  txnHash_not_ends_with: String
  txnHash_not_ends_with_nocase: String
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DelegateChange_filter]
  or: [DelegateChange_filter]
}

enum DelegateChange_orderBy {
  id
  tokenAddress
  delegator
  delegate
  previousDelegate
  blockTimestamp
  txnHash
  logIndex
  blockNumber
}

type DelegateVotingPowerChange {
  """Unique entity used to keep track of voting power delta"""
  id: ID!
  """Token addresss"""
  tokenAddress: String
  """Token address for delegate"""
  delegate: String!
  """Previous voting power of delegate"""
  previousBalance: BigInt!
  """New voting power of delegate"""
  newBalance: BigInt!
  """Block time change happened"""
  blockTimestamp: BigInt!
  """Transaction hash of the voting power change"""
  txnHash: String!
  """Log index for delegate voting power change"""
  logIndex: BigInt!
  """Block number of event"""
  blockNumber: BigInt!
}

input DelegateVotingPowerChange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  delegate: String
  delegate_not: String
  delegate_gt: String
  delegate_lt: String
  delegate_gte: String
  delegate_lte: String
  delegate_in: [String!]
  delegate_not_in: [String!]
  delegate_contains: String
  delegate_contains_nocase: String
  delegate_not_contains: String
  delegate_not_contains_nocase: String
  delegate_starts_with: String
  delegate_starts_with_nocase: String
  delegate_not_starts_with: String
  delegate_not_starts_with_nocase: String
  delegate_ends_with: String
  delegate_ends_with_nocase: String
  delegate_not_ends_with: String
  delegate_not_ends_with_nocase: String
  previousBalance: BigInt
  previousBalance_not: BigInt
  previousBalance_gt: BigInt
  previousBalance_lt: BigInt
  previousBalance_gte: BigInt
  previousBalance_lte: BigInt
  previousBalance_in: [BigInt!]
  previousBalance_not_in: [BigInt!]
  newBalance: BigInt
  newBalance_not: BigInt
  newBalance_gt: BigInt
  newBalance_lt: BigInt
  newBalance_gte: BigInt
  newBalance_lte: BigInt
  newBalance_in: [BigInt!]
  newBalance_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  txnHash: String
  txnHash_not: String
  txnHash_gt: String
  txnHash_lt: String
  txnHash_gte: String
  txnHash_lte: String
  txnHash_in: [String!]
  txnHash_not_in: [String!]
  txnHash_contains: String
  txnHash_contains_nocase: String
  txnHash_not_contains: String
  txnHash_not_contains_nocase: String
  txnHash_starts_with: String
  txnHash_starts_with_nocase: String
  txnHash_not_starts_with: String
  txnHash_not_starts_with_nocase: String
  txnHash_ends_with: String
  txnHash_ends_with_nocase: String
  txnHash_not_ends_with: String
  txnHash_not_ends_with_nocase: String
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DelegateVotingPowerChange_filter]
  or: [DelegateVotingPowerChange_filter]
}

enum DelegateVotingPowerChange_orderBy {
  id
  tokenAddress
  delegate
  previousBalance
  newBalance
  blockTimestamp
  txnHash
  logIndex
  blockNumber
}

input Delegate_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  delegatedVotesRaw: BigInt
  delegatedVotesRaw_not: BigInt
  delegatedVotesRaw_gt: BigInt
  delegatedVotesRaw_lt: BigInt
  delegatedVotesRaw_gte: BigInt
  delegatedVotesRaw_lte: BigInt
  delegatedVotesRaw_in: [BigInt!]
  delegatedVotesRaw_not_in: [BigInt!]
  delegatedVotes: BigDecimal
  delegatedVotes_not: BigDecimal
  delegatedVotes_gt: BigDecimal
  delegatedVotes_lt: BigDecimal
  delegatedVotes_gte: BigDecimal
  delegatedVotes_lte: BigDecimal
  delegatedVotes_in: [BigDecimal!]
  delegatedVotes_not_in: [BigDecimal!]
  tokenHoldersRepresentedAmount: Int
  tokenHoldersRepresentedAmount_not: Int
  tokenHoldersRepresentedAmount_gt: Int
  tokenHoldersRepresentedAmount_lt: Int
  tokenHoldersRepresentedAmount_gte: Int
  tokenHoldersRepresentedAmount_lte: Int
  tokenHoldersRepresentedAmount_in: [Int!]
  tokenHoldersRepresentedAmount_not_in: [Int!]
  tokenHoldersRepresented_: TokenHolder_filter
  votes_: Vote_filter
  numberVotes: Int
  numberVotes_not: Int
  numberVotes_gt: Int
  numberVotes_lt: Int
  numberVotes_gte: Int
  numberVotes_lte: Int
  numberVotes_in: [Int!]
  numberVotes_not_in: [Int!]
  proposals_: Proposal_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Delegate_filter]
  or: [Delegate_filter]
}

enum Delegate_orderBy {
  id
  delegatedVotesRaw
  delegatedVotes
  tokenHoldersRepresentedAmount
  tokenHoldersRepresented
  votes
  numberVotes
  proposals
}

type Governance {
  """Unique entity used to keep track of common aggregated data"""
  id: ID!
  """Total Supply of token"""
  totalTokenSupply: BigInt!
  """Total number of token holders currently"""
  currentTokenHolders: BigInt!
  """Total number of token holders"""
  totalTokenHolders: BigInt!
  """Total number of delegates participating on the governance currently"""
  currentDelegates: BigInt!
  """Total number of delegates that held delegated votes"""
  totalDelegates: BigInt!
  """
  Total number of votes delegated expressed in the smallest unit of the token
  """
  delegatedVotesRaw: BigInt!
  """
  Total number of votes delegated expressed as a BigDecimal normalized value for the token
  """
  delegatedVotes: BigDecimal!
  """Total number of proposals created"""
  proposals: BigInt!
  """Number of proposals currently queued for execution"""
  proposalsQueued: BigInt!
  """Number of proposals currently executed"""
  proposalsExecuted: BigInt!
  """Number of proposals currently canceled"""
  proposalsCanceled: BigInt!
}

type GovernanceFramework {
  """Governance framework contract address"""
  id: String!
  """Name of the governance framework"""
  name: String!
  """Type of governance framework"""
  type: GovernanceFrameworkType!
  """Version of the governance framework"""
  version: String!
  """Governance framework contract address"""
  contractAddress: String!
  """
  The contract address associated with the governance token used for voting on the governance framework proposals
  """
  tokenAddress: String!
  """
  The contract address associated with the contract that manages the delay of administrative actions for the governance framework
  """
  timelockAddress: String!
  """The delay before voting on a proposal may take place in blocks"""
  votingDelay: BigInt!
  """The duration of voting on a proposal in blocks"""
  votingPeriod: BigInt!
  """The number of votes required in order for a voter to become a proposer"""
  proposalThreshold: BigInt!
  """The number of votes for a proposal to succeed."""
  quorumVotes: BigInt
  """
  Quorum fraction numerator value. (OZ: quorum = totalSupply * numerator / denominator)
  """
  quorumNumerator: BigInt
  """
  Quorum fraction denominator value. (OZ: quorum = totalSupply * numerator / denominator)
  """
  quorumDenominator: BigInt
}

enum GovernanceFrameworkType {
  GovernorAlpha
  GovernorBravo
  OZGovernor
}

input GovernanceFramework_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  type: GovernanceFrameworkType
  type_not: GovernanceFrameworkType
  type_in: [GovernanceFrameworkType!]
  type_not_in: [GovernanceFrameworkType!]
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  contractAddress: String
  contractAddress_not: String
  contractAddress_gt: String
  contractAddress_lt: String
  contractAddress_gte: String
  contractAddress_lte: String
  contractAddress_in: [String!]
  contractAddress_not_in: [String!]
  contractAddress_contains: String
  contractAddress_contains_nocase: String
  contractAddress_not_contains: String
  contractAddress_not_contains_nocase: String
  contractAddress_starts_with: String
  contractAddress_starts_with_nocase: String
  contractAddress_not_starts_with: String
  contractAddress_not_starts_with_nocase: String
  contractAddress_ends_with: String
  contractAddress_ends_with_nocase: String
  contractAddress_not_ends_with: String
  contractAddress_not_ends_with_nocase: String
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  timelockAddress: String
  timelockAddress_not: String
  timelockAddress_gt: String
  timelockAddress_lt: String
  timelockAddress_gte: String
  timelockAddress_lte: String
  timelockAddress_in: [String!]
  timelockAddress_not_in: [String!]
  timelockAddress_contains: String
  timelockAddress_contains_nocase: String
  timelockAddress_not_contains: String
  timelockAddress_not_contains_nocase: String
  timelockAddress_starts_with: String
  timelockAddress_starts_with_nocase: String
  timelockAddress_not_starts_with: String
  timelockAddress_not_starts_with_nocase: String
  timelockAddress_ends_with: String
  timelockAddress_ends_with_nocase: String
  timelockAddress_not_ends_with: String
  timelockAddress_not_ends_with_nocase: String
  votingDelay: BigInt
  votingDelay_not: BigInt
  votingDelay_gt: BigInt
  votingDelay_lt: BigInt
  votingDelay_gte: BigInt
  votingDelay_lte: BigInt
  votingDelay_in: [BigInt!]
  votingDelay_not_in: [BigInt!]
  votingPeriod: BigInt
  votingPeriod_not: BigInt
  votingPeriod_gt: BigInt
  votingPeriod_lt: BigInt
  votingPeriod_gte: BigInt
  votingPeriod_lte: BigInt
  votingPeriod_in: [BigInt!]
  votingPeriod_not_in: [BigInt!]
  proposalThreshold: BigInt
  proposalThreshold_not: BigInt
  proposalThreshold_gt: BigInt
  proposalThreshold_lt: BigInt
  proposalThreshold_gte: BigInt
  proposalThreshold_lte: BigInt
  proposalThreshold_in: [BigInt!]
  proposalThreshold_not_in: [BigInt!]
  quorumVotes: BigInt
  quorumVotes_not: BigInt
  quorumVotes_gt: BigInt
  quorumVotes_lt: BigInt
  quorumVotes_gte: BigInt
  quorumVotes_lte: BigInt
  quorumVotes_in: [BigInt!]
  quorumVotes_not_in: [BigInt!]
  quorumNumerator: BigInt
  quorumNumerator_not: BigInt
  quorumNumerator_gt: BigInt
  quorumNumerator_lt: BigInt
  quorumNumerator_gte: BigInt
  quorumNumerator_lte: BigInt
  quorumNumerator_in: [BigInt!]
  quorumNumerator_not_in: [BigInt!]
  quorumDenominator: BigInt
  quorumDenominator_not: BigInt
  quorumDenominator_gt: BigInt
  quorumDenominator_lt: BigInt
  quorumDenominator_gte: BigInt
  quorumDenominator_lte: BigInt
  quorumDenominator_in: [BigInt!]
  quorumDenominator_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GovernanceFramework_filter]
  or: [GovernanceFramework_filter]
}

enum GovernanceFramework_orderBy {
  id
  name
  type
  version
  contractAddress
  tokenAddress
  timelockAddress
  votingDelay
  votingPeriod
  proposalThreshold
  quorumVotes
  quorumNumerator
  quorumDenominator
}

input Governance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalTokenSupply: BigInt
  totalTokenSupply_not: BigInt
  totalTokenSupply_gt: BigInt
  totalTokenSupply_lt: BigInt
  totalTokenSupply_gte: BigInt
  totalTokenSupply_lte: BigInt
  totalTokenSupply_in: [BigInt!]
  totalTokenSupply_not_in: [BigInt!]
  currentTokenHolders: BigInt
  currentTokenHolders_not: BigInt
  currentTokenHolders_gt: BigInt
  currentTokenHolders_lt: BigInt
  currentTokenHolders_gte: BigInt
  currentTokenHolders_lte: BigInt
  currentTokenHolders_in: [BigInt!]
  currentTokenHolders_not_in: [BigInt!]
  totalTokenHolders: BigInt
  totalTokenHolders_not: BigInt
  totalTokenHolders_gt: BigInt
  totalTokenHolders_lt: BigInt
  totalTokenHolders_gte: BigInt
  totalTokenHolders_lte: BigInt
  totalTokenHolders_in: [BigInt!]
  totalTokenHolders_not_in: [BigInt!]
  currentDelegates: BigInt
  currentDelegates_not: BigInt
  currentDelegates_gt: BigInt
  currentDelegates_lt: BigInt
  currentDelegates_gte: BigInt
  currentDelegates_lte: BigInt
  currentDelegates_in: [BigInt!]
  currentDelegates_not_in: [BigInt!]
  totalDelegates: BigInt
  totalDelegates_not: BigInt
  totalDelegates_gt: BigInt
  totalDelegates_lt: BigInt
  totalDelegates_gte: BigInt
  totalDelegates_lte: BigInt
  totalDelegates_in: [BigInt!]
  totalDelegates_not_in: [BigInt!]
  delegatedVotesRaw: BigInt
  delegatedVotesRaw_not: BigInt
  delegatedVotesRaw_gt: BigInt
  delegatedVotesRaw_lt: BigInt
  delegatedVotesRaw_gte: BigInt
  delegatedVotesRaw_lte: BigInt
  delegatedVotesRaw_in: [BigInt!]
  delegatedVotesRaw_not_in: [BigInt!]
  delegatedVotes: BigDecimal
  delegatedVotes_not: BigDecimal
  delegatedVotes_gt: BigDecimal
  delegatedVotes_lt: BigDecimal
  delegatedVotes_gte: BigDecimal
  delegatedVotes_lte: BigDecimal
  delegatedVotes_in: [BigDecimal!]
  delegatedVotes_not_in: [BigDecimal!]
  proposals: BigInt
  proposals_not: BigInt
  proposals_gt: BigInt
  proposals_lt: BigInt
  proposals_gte: BigInt
  proposals_lte: BigInt
  proposals_in: [BigInt!]
  proposals_not_in: [BigInt!]
  proposalsQueued: BigInt
  proposalsQueued_not: BigInt
  proposalsQueued_gt: BigInt
  proposalsQueued_lt: BigInt
  proposalsQueued_gte: BigInt
  proposalsQueued_lte: BigInt
  proposalsQueued_in: [BigInt!]
  proposalsQueued_not_in: [BigInt!]
  proposalsExecuted: BigInt
  proposalsExecuted_not: BigInt
  proposalsExecuted_gt: BigInt
  proposalsExecuted_lt: BigInt
  proposalsExecuted_gte: BigInt
  proposalsExecuted_lte: BigInt
  proposalsExecuted_in: [BigInt!]
  proposalsExecuted_not_in: [BigInt!]
  proposalsCanceled: BigInt
  proposalsCanceled_not: BigInt
  proposalsCanceled_gt: BigInt
  proposalsCanceled_lt: BigInt
  proposalsCanceled_gte: BigInt
  proposalsCanceled_lte: BigInt
  proposalsCanceled_in: [BigInt!]
  proposalsCanceled_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Governance_filter]
  or: [Governance_filter]
}

enum Governance_orderBy {
  id
  totalTokenSupply
  currentTokenHolders
  totalTokenHolders
  currentDelegates
  totalDelegates
  delegatedVotesRaw
  delegatedVotes
  proposals
  proposalsQueued
  proposalsExecuted
  proposalsCanceled
}

type Proposal {
  """
  Internal proposal ID, in this implementation it seems to be a autoincremental id
  """
  id: ID!
  """Transaction hash of the proposal creation"""
  txnHash: String!
  """Proposal description in markdown format"""
  description: String!
  """Governance Framework that proposal is part of"""
  governanceFramework: GovernanceFramework!
  """Delegate that proposed the proposal"""
  proposer: Delegate!
  """State of the proposal"""
  state: ProposalState!
  """The number of votes for a proposal to succeed."""
  quorumVotes: BigInt!
  """Number of tokenholders at start of voting"""
  tokenHoldersAtStart: BigInt!
  """Number of delegates at start of voting"""
  delegatesAtStart: BigInt!
  """Number of delegates that voted against the proposal"""
  againstDelegateVotes: BigInt!
  """Number of delegates that voted for the proposal"""
  forDelegateVotes: BigInt!
  """Number of delegates that voted abstain to the proposal"""
  abstainDelegateVotes: BigInt!
  """Total number of delegates that voted on the proposal"""
  totalDelegateVotes: BigInt!
  """Weighted votes against the proposal"""
  againstWeightedVotes: BigInt!
  """Weighted votes for the proposal"""
  forWeightedVotes: BigInt!
  """Weighted votes abstaining to the proposal"""
  abstainWeightedVotes: BigInt!
  """Total weighted for/against/abstaining votes"""
  totalWeightedVotes: BigInt!
  """Votes associated to this proposal"""
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]!
  """Block number proposal was created in"""
  creationBlock: BigInt!
  """Timestamp of block proposal was created in"""
  creationTime: BigInt!
  """Block number from where the voting starts"""
  startBlock: BigInt!
  """Block number from where the voting ends"""
  endBlock: BigInt!
  """Transaction hash of the proposal being queued"""
  queueTxnHash: String
  """Block number proposal was queued in"""
  queueBlock: BigInt
  """Timestamp of block proposal was queued in"""
  queueTime: BigInt
  """
  Once the proposal is queued for execution it will have an ETA of the execution
  """
  executionETA: BigInt
  """Transaction hash of the proposal execution"""
  executionTxnHash: String
  """Block number proposal was executed in"""
  executionBlock: BigInt
  """Timestamp of block proposal was executed in"""
  executionTime: BigInt
  """Transaction hash of the proposal cancellation"""
  cancellationTxnHash: String
  """Block number proposal was canceled in"""
  cancellationBlock: BigInt
  """Timestamp of block proposal was canceled in"""
  cancellationTime: BigInt
  """Targets data for the change"""
  targets: [String!]
  """Values data for the change"""
  values: [BigInt!]
  """Signature data for the change"""
  signatures: [String!]
  """Call data for the change"""
  calldatas: [Bytes!]
}

enum ProposalState {
  PENDING
  ACTIVE
  CANCELED
  DEFEATED
  SUCCEEDED
  QUEUED
  EXPIRED
  EXECUTED
}

input Proposal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txnHash: String
  txnHash_not: String
  txnHash_gt: String
  txnHash_lt: String
  txnHash_gte: String
  txnHash_lte: String
  txnHash_in: [String!]
  txnHash_not_in: [String!]
  txnHash_contains: String
  txnHash_contains_nocase: String
  txnHash_not_contains: String
  txnHash_not_contains_nocase: String
  txnHash_starts_with: String
  txnHash_starts_with_nocase: String
  txnHash_not_starts_with: String
  txnHash_not_starts_with_nocase: String
  txnHash_ends_with: String
  txnHash_ends_with_nocase: String
  txnHash_not_ends_with: String
  txnHash_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  governanceFramework: String
  governanceFramework_not: String
  governanceFramework_gt: String
  governanceFramework_lt: String
  governanceFramework_gte: String
  governanceFramework_lte: String
  governanceFramework_in: [String!]
  governanceFramework_not_in: [String!]
  governanceFramework_contains: String
  governanceFramework_contains_nocase: String
  governanceFramework_not_contains: String
  governanceFramework_not_contains_nocase: String
  governanceFramework_starts_with: String
  governanceFramework_starts_with_nocase: String
  governanceFramework_not_starts_with: String
  governanceFramework_not_starts_with_nocase: String
  governanceFramework_ends_with: String
  governanceFramework_ends_with_nocase: String
  governanceFramework_not_ends_with: String
  governanceFramework_not_ends_with_nocase: String
  governanceFramework_: GovernanceFramework_filter
  proposer: String
  proposer_not: String
  proposer_gt: String
  proposer_lt: String
  proposer_gte: String
  proposer_lte: String
  proposer_in: [String!]
  proposer_not_in: [String!]
  proposer_contains: String
  proposer_contains_nocase: String
  proposer_not_contains: String
  proposer_not_contains_nocase: String
  proposer_starts_with: String
  proposer_starts_with_nocase: String
  proposer_not_starts_with: String
  proposer_not_starts_with_nocase: String
  proposer_ends_with: String
  proposer_ends_with_nocase: String
  proposer_not_ends_with: String
  proposer_not_ends_with_nocase: String
  proposer_: Delegate_filter
  state: ProposalState
  state_not: ProposalState
  state_in: [ProposalState!]
  state_not_in: [ProposalState!]
  quorumVotes: BigInt
  quorumVotes_not: BigInt
  quorumVotes_gt: BigInt
  quorumVotes_lt: BigInt
  quorumVotes_gte: BigInt
  quorumVotes_lte: BigInt
  quorumVotes_in: [BigInt!]
  quorumVotes_not_in: [BigInt!]
  tokenHoldersAtStart: BigInt
  tokenHoldersAtStart_not: BigInt
  tokenHoldersAtStart_gt: BigInt
  tokenHoldersAtStart_lt: BigInt
  tokenHoldersAtStart_gte: BigInt
  tokenHoldersAtStart_lte: BigInt
  tokenHoldersAtStart_in: [BigInt!]
  tokenHoldersAtStart_not_in: [BigInt!]
  delegatesAtStart: BigInt
  delegatesAtStart_not: BigInt
  delegatesAtStart_gt: BigInt
  delegatesAtStart_lt: BigInt
  delegatesAtStart_gte: BigInt
  delegatesAtStart_lte: BigInt
  delegatesAtStart_in: [BigInt!]
  delegatesAtStart_not_in: [BigInt!]
  againstDelegateVotes: BigInt
  againstDelegateVotes_not: BigInt
  againstDelegateVotes_gt: BigInt
  againstDelegateVotes_lt: BigInt
  againstDelegateVotes_gte: BigInt
  againstDelegateVotes_lte: BigInt
  againstDelegateVotes_in: [BigInt!]
  againstDelegateVotes_not_in: [BigInt!]
  forDelegateVotes: BigInt
  forDelegateVotes_not: BigInt
  forDelegateVotes_gt: BigInt
  forDelegateVotes_lt: BigInt
  forDelegateVotes_gte: BigInt
  forDelegateVotes_lte: BigInt
  forDelegateVotes_in: [BigInt!]
  forDelegateVotes_not_in: [BigInt!]
  abstainDelegateVotes: BigInt
  abstainDelegateVotes_not: BigInt
  abstainDelegateVotes_gt: BigInt
  abstainDelegateVotes_lt: BigInt
  abstainDelegateVotes_gte: BigInt
  abstainDelegateVotes_lte: BigInt
  abstainDelegateVotes_in: [BigInt!]
  abstainDelegateVotes_not_in: [BigInt!]
  totalDelegateVotes: BigInt
  totalDelegateVotes_not: BigInt
  totalDelegateVotes_gt: BigInt
  totalDelegateVotes_lt: BigInt
  totalDelegateVotes_gte: BigInt
  totalDelegateVotes_lte: BigInt
  totalDelegateVotes_in: [BigInt!]
  totalDelegateVotes_not_in: [BigInt!]
  againstWeightedVotes: BigInt
  againstWeightedVotes_not: BigInt
  againstWeightedVotes_gt: BigInt
  againstWeightedVotes_lt: BigInt
  againstWeightedVotes_gte: BigInt
  againstWeightedVotes_lte: BigInt
  againstWeightedVotes_in: [BigInt!]
  againstWeightedVotes_not_in: [BigInt!]
  forWeightedVotes: BigInt
  forWeightedVotes_not: BigInt
  forWeightedVotes_gt: BigInt
  forWeightedVotes_lt: BigInt
  forWeightedVotes_gte: BigInt
  forWeightedVotes_lte: BigInt
  forWeightedVotes_in: [BigInt!]
  forWeightedVotes_not_in: [BigInt!]
  abstainWeightedVotes: BigInt
  abstainWeightedVotes_not: BigInt
  abstainWeightedVotes_gt: BigInt
  abstainWeightedVotes_lt: BigInt
  abstainWeightedVotes_gte: BigInt
  abstainWeightedVotes_lte: BigInt
  abstainWeightedVotes_in: [BigInt!]
  abstainWeightedVotes_not_in: [BigInt!]
  totalWeightedVotes: BigInt
  totalWeightedVotes_not: BigInt
  totalWeightedVotes_gt: BigInt
  totalWeightedVotes_lt: BigInt
  totalWeightedVotes_gte: BigInt
  totalWeightedVotes_lte: BigInt
  totalWeightedVotes_in: [BigInt!]
  totalWeightedVotes_not_in: [BigInt!]
  votes_: Vote_filter
  creationBlock: BigInt
  creationBlock_not: BigInt
  creationBlock_gt: BigInt
  creationBlock_lt: BigInt
  creationBlock_gte: BigInt
  creationBlock_lte: BigInt
  creationBlock_in: [BigInt!]
  creationBlock_not_in: [BigInt!]
  creationTime: BigInt
  creationTime_not: BigInt
  creationTime_gt: BigInt
  creationTime_lt: BigInt
  creationTime_gte: BigInt
  creationTime_lte: BigInt
  creationTime_in: [BigInt!]
  creationTime_not_in: [BigInt!]
  startBlock: BigInt
  startBlock_not: BigInt
  startBlock_gt: BigInt
  startBlock_lt: BigInt
  startBlock_gte: BigInt
  startBlock_lte: BigInt
  startBlock_in: [BigInt!]
  startBlock_not_in: [BigInt!]
  endBlock: BigInt
  endBlock_not: BigInt
  endBlock_gt: BigInt
  endBlock_lt: BigInt
  endBlock_gte: BigInt
  endBlock_lte: BigInt
  endBlock_in: [BigInt!]
  endBlock_not_in: [BigInt!]
  queueTxnHash: String
  queueTxnHash_not: String
  queueTxnHash_gt: String
  queueTxnHash_lt: String
  queueTxnHash_gte: String
  queueTxnHash_lte: String
  queueTxnHash_in: [String!]
  queueTxnHash_not_in: [String!]
  queueTxnHash_contains: String
  queueTxnHash_contains_nocase: String
  queueTxnHash_not_contains: String
  queueTxnHash_not_contains_nocase: String
  queueTxnHash_starts_with: String
  queueTxnHash_starts_with_nocase: String
  queueTxnHash_not_starts_with: String
  queueTxnHash_not_starts_with_nocase: String
  queueTxnHash_ends_with: String
  queueTxnHash_ends_with_nocase: String
  queueTxnHash_not_ends_with: String
  queueTxnHash_not_ends_with_nocase: String
  queueBlock: BigInt
  queueBlock_not: BigInt
  queueBlock_gt: BigInt
  queueBlock_lt: BigInt
  queueBlock_gte: BigInt
  queueBlock_lte: BigInt
  queueBlock_in: [BigInt!]
  queueBlock_not_in: [BigInt!]
  queueTime: BigInt
  queueTime_not: BigInt
  queueTime_gt: BigInt
  queueTime_lt: BigInt
  queueTime_gte: BigInt
  queueTime_lte: BigInt
  queueTime_in: [BigInt!]
  queueTime_not_in: [BigInt!]
  executionETA: BigInt
  executionETA_not: BigInt
  executionETA_gt: BigInt
  executionETA_lt: BigInt
  executionETA_gte: BigInt
  executionETA_lte: BigInt
  executionETA_in: [BigInt!]
  executionETA_not_in: [BigInt!]
  executionTxnHash: String
  executionTxnHash_not: String
  executionTxnHash_gt: String
  executionTxnHash_lt: String
  executionTxnHash_gte: String
  executionTxnHash_lte: String
  executionTxnHash_in: [String!]
  executionTxnHash_not_in: [String!]
  executionTxnHash_contains: String
  executionTxnHash_contains_nocase: String
  executionTxnHash_not_contains: String
  executionTxnHash_not_contains_nocase: String
  executionTxnHash_starts_with: String
  executionTxnHash_starts_with_nocase: String
  executionTxnHash_not_starts_with: String
  executionTxnHash_not_starts_with_nocase: String
  executionTxnHash_ends_with: String
  executionTxnHash_ends_with_nocase: String
  executionTxnHash_not_ends_with: String
  executionTxnHash_not_ends_with_nocase: String
  executionBlock: BigInt
  executionBlock_not: BigInt
  executionBlock_gt: BigInt
  executionBlock_lt: BigInt
  executionBlock_gte: BigInt
  executionBlock_lte: BigInt
  executionBlock_in: [BigInt!]
  executionBlock_not_in: [BigInt!]
  executionTime: BigInt
  executionTime_not: BigInt
  executionTime_gt: BigInt
  executionTime_lt: BigInt
  executionTime_gte: BigInt
  executionTime_lte: BigInt
  executionTime_in: [BigInt!]
  executionTime_not_in: [BigInt!]
  cancellationTxnHash: String
  cancellationTxnHash_not: String
  cancellationTxnHash_gt: String
  cancellationTxnHash_lt: String
  cancellationTxnHash_gte: String
  cancellationTxnHash_lte: String
  cancellationTxnHash_in: [String!]
  cancellationTxnHash_not_in: [String!]
  cancellationTxnHash_contains: String
  cancellationTxnHash_contains_nocase: String
  cancellationTxnHash_not_contains: String
  cancellationTxnHash_not_contains_nocase: String
  cancellationTxnHash_starts_with: String
  cancellationTxnHash_starts_with_nocase: String
  cancellationTxnHash_not_starts_with: String
  cancellationTxnHash_not_starts_with_nocase: String
  cancellationTxnHash_ends_with: String
  cancellationTxnHash_ends_with_nocase: String
  cancellationTxnHash_not_ends_with: String
  cancellationTxnHash_not_ends_with_nocase: String
  cancellationBlock: BigInt
  cancellationBlock_not: BigInt
  cancellationBlock_gt: BigInt
  cancellationBlock_lt: BigInt
  cancellationBlock_gte: BigInt
  cancellationBlock_lte: BigInt
  cancellationBlock_in: [BigInt!]
  cancellationBlock_not_in: [BigInt!]
  cancellationTime: BigInt
  cancellationTime_not: BigInt
  cancellationTime_gt: BigInt
  cancellationTime_lt: BigInt
  cancellationTime_gte: BigInt
  cancellationTime_lte: BigInt
  cancellationTime_in: [BigInt!]
  cancellationTime_not_in: [BigInt!]
  targets: [String!]
  targets_not: [String!]
  targets_contains: [String!]
  targets_contains_nocase: [String!]
  targets_not_contains: [String!]
  targets_not_contains_nocase: [String!]
  values: [BigInt!]
  values_not: [BigInt!]
  values_contains: [BigInt!]
  values_contains_nocase: [BigInt!]
  values_not_contains: [BigInt!]
  values_not_contains_nocase: [BigInt!]
  signatures: [String!]
  signatures_not: [String!]
  signatures_contains: [String!]
  signatures_contains_nocase: [String!]
  signatures_not_contains: [String!]
  signatures_not_contains_nocase: [String!]
  calldatas: [Bytes!]
  calldatas_not: [Bytes!]
  calldatas_contains: [Bytes!]
  calldatas_contains_nocase: [Bytes!]
  calldatas_not_contains: [Bytes!]
  calldatas_not_contains_nocase: [Bytes!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Proposal_filter]
  or: [Proposal_filter]
}

enum Proposal_orderBy {
  id
  txnHash
  description
  governanceFramework
  governanceFramework__id
  governanceFramework__name
  governanceFramework__type
  governanceFramework__version
  governanceFramework__contractAddress
  governanceFramework__tokenAddress
  governanceFramework__timelockAddress
  governanceFramework__votingDelay
  governanceFramework__votingPeriod
  governanceFramework__proposalThreshold
  governanceFramework__quorumVotes
  governanceFramework__quorumNumerator
  governanceFramework__quorumDenominator
  proposer
  proposer__id
  proposer__delegatedVotesRaw
  proposer__delegatedVotes
  proposer__tokenHoldersRepresentedAmount
  proposer__numberVotes
  state
  quorumVotes
  tokenHoldersAtStart
  delegatesAtStart
  againstDelegateVotes
  forDelegateVotes
  abstainDelegateVotes
  totalDelegateVotes
  againstWeightedVotes
  forWeightedVotes
  abstainWeightedVotes
  totalWeightedVotes
  votes
  creationBlock
  creationTime
  startBlock
  endBlock
  queueTxnHash
  queueBlock
  queueTime
  executionETA
  executionTxnHash
  executionBlock
  executionTime
  cancellationTxnHash
  cancellationBlock
  cancellationTime
  targets
  values
  signatures
  calldatas
}

type TokenDailySnapshot {
  """Number of days from Unix epoch time"""
  id: ID!
  """Total Supply at snapshot"""
  totalSupply: BigInt!
  """Number of tokenholders at snapshot"""
  tokenHolders: BigInt!
  """Number of delegates at snapshot"""
  delegates: BigInt!
  """Block number of last block in snapshot"""
  blockNumber: BigInt!
  """Timestamp of snapshot"""
  timestamp: BigInt!
}

input TokenDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  tokenHolders: BigInt
  tokenHolders_not: BigInt
  tokenHolders_gt: BigInt
  tokenHolders_lt: BigInt
  tokenHolders_gte: BigInt
  tokenHolders_lte: BigInt
  tokenHolders_in: [BigInt!]
  tokenHolders_not_in: [BigInt!]
  delegates: BigInt
  delegates_not: BigInt
  delegates_gt: BigInt
  delegates_lt: BigInt
  delegates_gte: BigInt
  delegates_lte: BigInt
  delegates_in: [BigInt!]
  delegates_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenDailySnapshot_filter]
  or: [TokenDailySnapshot_filter]
}

enum TokenDailySnapshot_orderBy {
  id
  totalSupply
  tokenHolders
  delegates
  blockNumber
  timestamp
}

type TokenHolder {
  """
  A TokenHolder is any address that holds any amount of tokens, the id used is the blockchain address.
  """
  id: String!
  """
  Delegate address of the token holder which will participate in votings. Delegates don't need to hold any tokens and can even be the token holder itself.
  """
  delegate: Delegate
  """
  Token balance of this address expressed in the smallest unit of the token
  """
  tokenBalanceRaw: BigInt!
  """
  Token balance of this address expressed as a BigDecimal normalized value
  """
  tokenBalance: BigDecimal!
  """
  Total amount of tokens ever held by this address expressed in the smallest unit of the token
  """
  totalTokensHeldRaw: BigInt!
  """
  Total amount of tokens ever held by this address expressed as a BigDecimal normalized value
  """
  totalTokensHeld: BigDecimal!
}

input TokenHolder_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  delegate: String
  delegate_not: String
  delegate_gt: String
  delegate_lt: String
  delegate_gte: String
  delegate_lte: String
  delegate_in: [String!]
  delegate_not_in: [String!]
  delegate_contains: String
  delegate_contains_nocase: String
  delegate_not_contains: String
  delegate_not_contains_nocase: String
  delegate_starts_with: String
  delegate_starts_with_nocase: String
  delegate_not_starts_with: String
  delegate_not_starts_with_nocase: String
  delegate_ends_with: String
  delegate_ends_with_nocase: String
  delegate_not_ends_with: String
  delegate_not_ends_with_nocase: String
  delegate_: Delegate_filter
  tokenBalanceRaw: BigInt
  tokenBalanceRaw_not: BigInt
  tokenBalanceRaw_gt: BigInt
  tokenBalanceRaw_lt: BigInt
  tokenBalanceRaw_gte: BigInt
  tokenBalanceRaw_lte: BigInt
  tokenBalanceRaw_in: [BigInt!]
  tokenBalanceRaw_not_in: [BigInt!]
  tokenBalance: BigDecimal
  tokenBalance_not: BigDecimal
  tokenBalance_gt: BigDecimal
  tokenBalance_lt: BigDecimal
  tokenBalance_gte: BigDecimal
  tokenBalance_lte: BigDecimal
  tokenBalance_in: [BigDecimal!]
  tokenBalance_not_in: [BigDecimal!]
  totalTokensHeldRaw: BigInt
  totalTokensHeldRaw_not: BigInt
  totalTokensHeldRaw_gt: BigInt
  totalTokensHeldRaw_lt: BigInt
  totalTokensHeldRaw_gte: BigInt
  totalTokensHeldRaw_lte: BigInt
  totalTokensHeldRaw_in: [BigInt!]
  totalTokensHeldRaw_not_in: [BigInt!]
  totalTokensHeld: BigDecimal
  totalTokensHeld_not: BigDecimal
  totalTokensHeld_gt: BigDecimal
  totalTokensHeld_lt: BigDecimal
  totalTokensHeld_gte: BigDecimal
  totalTokensHeld_lte: BigDecimal
  totalTokensHeld_in: [BigDecimal!]
  totalTokensHeld_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenHolder_filter]
  or: [TokenHolder_filter]
}

enum TokenHolder_orderBy {
  id
  delegate
  delegate__id
  delegate__delegatedVotesRaw
  delegate__delegatedVotes
  delegate__tokenHoldersRepresentedAmount
  delegate__numberVotes
  tokenBalanceRaw
  tokenBalance
  totalTokensHeldRaw
  totalTokensHeld
}

type Vote {
  """Delegate ID + Proposal ID"""
  id: ID!
  """Whether the vote is in favour, against or abstaining to the proposal"""
  choice: VoteChoice!
  """Voting weight expressed in the vote"""
  weight: BigInt!
  """Reason for voting choice"""
  reason: String
  """Delegate that emitted the vote"""
  voter: Delegate!
  """Proposal that is being voted on"""
  proposal: Proposal!
  """Block number vote is cast in"""
  block: BigInt!
  """Timestamp of block vote was cast in"""
  blockTime: BigInt!
  """Transaction hash of the vote"""
  txnHash: String!
}

enum VoteChoice {
  FOR
  AGAINST
  ABSTAIN
}

type VoteDailySnapshot {
  """Number of days from Unix epoch time"""
  id: ID!
  """Proposal this snapshot is associated with"""
  proposal: Proposal!
  """Weighted votes against the proposal at snapshot"""
  forWeightedVotes: BigInt!
  """Weighted votes abstaining to the proposal at snapshot"""
  againstWeightedVotes: BigInt!
  """Weighted votes for the proposal at snapshot"""
  abstainWeightedVotes: BigInt!
  """Total weighted for/against/abstaining votes at snapshot"""
  totalWeightedVotes: BigInt!
  """Block number of last block in snapshot"""
  blockNumber: BigInt!
  """Timestamp of snapshot"""
  timestamp: BigInt!
}

input VoteDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: Proposal_filter
  forWeightedVotes: BigInt
  forWeightedVotes_not: BigInt
  forWeightedVotes_gt: BigInt
  forWeightedVotes_lt: BigInt
  forWeightedVotes_gte: BigInt
  forWeightedVotes_lte: BigInt
  forWeightedVotes_in: [BigInt!]
  forWeightedVotes_not_in: [BigInt!]
  againstWeightedVotes: BigInt
  againstWeightedVotes_not: BigInt
  againstWeightedVotes_gt: BigInt
  againstWeightedVotes_lt: BigInt
  againstWeightedVotes_gte: BigInt
  againstWeightedVotes_lte: BigInt
  againstWeightedVotes_in: [BigInt!]
  againstWeightedVotes_not_in: [BigInt!]
  abstainWeightedVotes: BigInt
  abstainWeightedVotes_not: BigInt
  abstainWeightedVotes_gt: BigInt
  abstainWeightedVotes_lt: BigInt
  abstainWeightedVotes_gte: BigInt
  abstainWeightedVotes_lte: BigInt
  abstainWeightedVotes_in: [BigInt!]
  abstainWeightedVotes_not_in: [BigInt!]
  totalWeightedVotes: BigInt
  totalWeightedVotes_not: BigInt
  totalWeightedVotes_gt: BigInt
  totalWeightedVotes_lt: BigInt
  totalWeightedVotes_gte: BigInt
  totalWeightedVotes_lte: BigInt
  totalWeightedVotes_in: [BigInt!]
  totalWeightedVotes_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VoteDailySnapshot_filter]
  or: [VoteDailySnapshot_filter]
}

enum VoteDailySnapshot_orderBy {
  id
  proposal
  proposal__id
  proposal__txnHash
  proposal__description
  proposal__state
  proposal__quorumVotes
  proposal__tokenHoldersAtStart
  proposal__delegatesAtStart
  proposal__againstDelegateVotes
  proposal__forDelegateVotes
  proposal__abstainDelegateVotes
  proposal__totalDelegateVotes
  proposal__againstWeightedVotes
  proposal__forWeightedVotes
  proposal__abstainWeightedVotes
  proposal__totalWeightedVotes
  proposal__creationBlock
  proposal__creationTime
  proposal__startBlock
  proposal__endBlock
  proposal__queueTxnHash
  proposal__queueBlock
  proposal__queueTime
  proposal__executionETA
  proposal__executionTxnHash
  proposal__executionBlock
  proposal__executionTime
  proposal__cancellationTxnHash
  proposal__cancellationBlock
  proposal__cancellationTime
  forWeightedVotes
  againstWeightedVotes
  abstainWeightedVotes
  totalWeightedVotes
  blockNumber
  timestamp
}

input Vote_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  choice: VoteChoice
  choice_not: VoteChoice
  choice_in: [VoteChoice!]
  choice_not_in: [VoteChoice!]
  weight: BigInt
  weight_not: BigInt
  weight_gt: BigInt
  weight_lt: BigInt
  weight_gte: BigInt
  weight_lte: BigInt
  weight_in: [BigInt!]
  weight_not_in: [BigInt!]
  reason: String
  reason_not: String
  reason_gt: String
  reason_lt: String
  reason_gte: String
  reason_lte: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_contains: String
  reason_contains_nocase: String
  reason_not_contains: String
  reason_not_contains_nocase: String
  reason_starts_with: String
  reason_starts_with_nocase: String
  reason_not_starts_with: String
  reason_not_starts_with_nocase: String
  reason_ends_with: String
  reason_ends_with_nocase: String
  reason_not_ends_with: String
  reason_not_ends_with_nocase: String
  voter: String
  voter_not: String
  voter_gt: String
  voter_lt: String
  voter_gte: String
  voter_lte: String
  voter_in: [String!]
  voter_not_in: [String!]
  voter_contains: String
  voter_contains_nocase: String
  voter_not_contains: String
  voter_not_contains_nocase: String
  voter_starts_with: String
  voter_starts_with_nocase: String
  voter_not_starts_with: String
  voter_not_starts_with_nocase: String
  voter_ends_with: String
  voter_ends_with_nocase: String
  voter_not_ends_with: String
  voter_not_ends_with_nocase: String
  voter_: Delegate_filter
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: Proposal_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  blockTime: BigInt
  blockTime_not: BigInt
  blockTime_gt: BigInt
  blockTime_lt: BigInt
  blockTime_gte: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
  blockTime_not_in: [BigInt!]
  txnHash: String
  txnHash_not: String
  txnHash_gt: String
  txnHash_lt: String
  txnHash_gte: String
  txnHash_lte: String
  txnHash_in: [String!]
  txnHash_not_in: [String!]
  txnHash_contains: String
  txnHash_contains_nocase: String
  txnHash_not_contains: String
  txnHash_not_contains_nocase: String
  txnHash_starts_with: String
  txnHash_starts_with_nocase: String
  txnHash_not_starts_with: String
  txnHash_not_starts_with_nocase: String
  txnHash_ends_with: String
  txnHash_ends_with_nocase: String
  txnHash_not_ends_with: String
  txnHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Vote_filter]
  or: [Vote_filter]
}

enum Vote_orderBy {
  id
  choice
  weight
  reason
  voter
  voter__id
  voter__delegatedVotesRaw
  voter__delegatedVotes
  voter__tokenHoldersRepresentedAmount
  voter__numberVotes
  proposal
  proposal__id
  proposal__txnHash
  proposal__description
  proposal__state
  proposal__quorumVotes
  proposal__tokenHoldersAtStart
  proposal__delegatesAtStart
  proposal__againstDelegateVotes
  proposal__forDelegateVotes
  proposal__abstainDelegateVotes
  proposal__totalDelegateVotes
  proposal__againstWeightedVotes
  proposal__forWeightedVotes
  proposal__abstainWeightedVotes
  proposal__totalWeightedVotes
  proposal__creationBlock
  proposal__creationTime
  proposal__startBlock
  proposal__endBlock
  proposal__queueTxnHash
  proposal__queueBlock
  proposal__queueTime
  proposal__executionETA
  proposal__executionTxnHash
  proposal__executionBlock
  proposal__executionTime
  proposal__cancellationTxnHash
  proposal__cancellationBlock
  proposal__cancellationTime
  block
  blockTime
  txnHash
}