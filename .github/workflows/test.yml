name: main-staging
on:
  # push trigger required to get coveralls monitoring of default branch
  # pull_request trigger required to get PR comments
  workflow_dispatch:
  pull_request:
    branches: [main, staging]
    paths:
      [
        'pkgs/**/*.{json,rs,ts}',
        'contracts/**/*.sol',
        'query-api/**/*.{js,json,ts,graphql}',
        'test/**/*.{js,ts}',
        'Cargo.lock',
        'pnpm-lock.yaml',
        '!**/*.md',
      ]
  push:
    branches: [main, staging]
    paths:
      [
        'pkgs/**/*.{json,rs,toml,ts}',
        'contracts/**/*.sol',
        '!contracts/lib/**',
        'test/**/*.{js,ts}',
        'query-api/**/*.{js,json,ts,graphql}',
        'Cargo.lock',
        'Cargo.toml',
        'pnpm-lock.yaml',
        '!**/*.md',
      ]
jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      jts_any_changed: ${{ steps.changed-files.outputs.jts_any_changed }}
      rust_any_changed: ${{ steps.changed-files.outputs.rust_any_changed }}
      sol_any_changed: ${{ steps.changed-files.outputs.sol_any_changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2.7.3
      - uses: foundry-rs/foundry-toolchain@v1.2.0
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2024-02-18
          profile: minimal
          override: true

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
      - uses: tj-actions/changed-files@v44
        with:
          files_yaml: |
            rust:
              - '**/*.{rs,toml}'
              - Cargo.lock
            jts:
              - **/package.json
              - **/*.{js,ts}
              - pnpm-lock.yaml
            sol:
              - **/*.sol

  deps:
    needs: changed-files
    if: needs.changed-files.outputs.jts_any_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-env.outputs.key }}
      cache-path: ${{ steps.cache-env.outputs.path }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          version: nightly
      - name: Install nextest
        uses: taiki-e/cache-cargo-install-action@v2.0.1
        with:
          tool: cargo-nextest
      - name: Install wasm-pack
        uses: taiki-e/cache-cargo-install-action@v2.0.1
        with:
          tool: wasm-pack
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - uses: pnpm/action-setup@v4.0.0
          version: nightly

      - name: Install nextest
        run: cargo install cargo-nextest --locked

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 19

      - uses: pnpm/action-setup@v2.2.4
        name: Install pnpm
          node-version: 20.x
      - uses: pnpm/action-setup@v2.2.4
        id: pnpm-install
        with:
          version: 9.4.0
          run_install: false

      - name: Output cache env
        id: cache-env
        shell: bash
        run: |
          echo "key=${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
          echo "path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
      - uses: actions/cache@v3
        name: Setup pnpm cache
      - name: Setup pnpm cache
        uses: actions/cache@v4
        id: pnpm-cache
        with:
          key: ${{ steps.cache-env.outputs.key }}
          path: ${{ steps.cache-env.outputs.path }}
          restore-keys: ${{ runnner.os }}-pnpm-store-

      - if: steps.pnpm-cache.outputs.cache-hit != true
        run: pnpm i --ignore-scripts --no-frozen-lockfile

  test-node:
    needs: [changed-files,deps]
    if: needs.changed-files.outputs.jts_any_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - uses: pnpm/action-setup@v4.0.0
        id: pnpm-install
        with:
          version: 9.4.0
          run_install: false
      - uses: actions/cache@v4
        with:
          key: ${{ needs.deps.outputs.cache-key }}
          path: ${{ needs.deps.outputs.cache-path }}

      - run: pnpm test.jest
        env:
          DUNE_API_KEY: foo
          GRAPH_API_KEY: ${{ secrets.GRAPH_API_KEY }} # required for build step on which test depends on

      - uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  test-rust:
    needs: changed-files
    if: needs.changed-files.outputs.rs_any_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - if: contains(needs.deps.outputs.modified_files, ".rs")
        uses: dtolnay/rust-toolchain@nightly
      - if: contains(needs.deps.outputs.modified_files, ".rs")
        uses: Swatinem/rust-cache@v2.7.3
      - name: Install nextest
        uses: taiki-e/cache-cargo-install-action@v2.0.1
        with:
          tool: cargo-nextest
      - run: cargo nextest run --workspace

  test-sol:
    needs: changed-files
    if: needs.changed-files.outputs.sol_any_changed == 'true'
    steps:
      - uses: foundry-rs/foundry-toolchain@v1.2.0
        with:
          version: nightly
      - run: forge test
